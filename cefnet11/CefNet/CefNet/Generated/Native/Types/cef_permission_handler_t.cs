// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_permission_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Implement this structure to handle events related to permission requests.
	/// The functions of this structure will be called on the browser process UI
	/// thread.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_permission_handler_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_permission_handler_t* self, _cef_browser_t* browser, _cef_frame_t* frame, const cef_string_t* requesting_origin, uint32 requested_permissions, _cef_media_access_callback_t* callback)*
		/// </summary>
		public void* on_request_media_access_permission;

		/// <summary>
		/// Called when a page requests permission to access media.
		/// |requesting_origin| is the URL origin requesting permission.
		/// |requested_permissions| is a combination of values from
		/// cef_media_access_permission_types_t that represent the requested
		/// permissions. Return true (1) and call cef_media_access_callback_t
		/// functions either in this function or at a later time to continue or cancel
		/// the request. Return false (0) to proceed with default handling. With the
		/// Chrome runtime, default handling will display the permission request UI.
		/// With the Alloy runtime, default handling will deny the request. This
		/// function will not be called if the &quot;--enable-media-stream&quot; command-line
		/// switch is used to grant all permissions.
		/// </summary>
		[NativeName("on_request_media_access_permission")]
		public unsafe int OnRequestMediaAccessPermission(cef_browser_t* browser, cef_frame_t* frame, [Immutable]cef_string_t* requesting_origin, uint requested_permissions, cef_media_access_callback_t* callback)
		{
			fixed (cef_permission_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_permission_handler_t*, cef_browser_t*, cef_frame_t*, cef_string_t*, uint, cef_media_access_callback_t*, int>)on_request_media_access_permission)(self, browser, frame, requesting_origin, requested_permissions, callback);
			}
		}

		/// <summary>
		/// int (*)(_cef_permission_handler_t* self, _cef_browser_t* browser, uint64 prompt_id, const cef_string_t* requesting_origin, uint32 requested_permissions, _cef_permission_prompt_callback_t* callback)*
		/// </summary>
		public void* on_show_permission_prompt;

		/// <summary>
		/// Called when a page should show a permission prompt. |prompt_id| uniquely
		/// identifies the prompt. |requesting_origin| is the URL origin requesting
		/// permission. |requested_permissions| is a combination of values from
		/// cef_permission_request_types_t that represent the requested permissions.
		/// Return true (1) and call cef_permission_prompt_callback_t::Continue either
		/// in this function or at a later time to continue or cancel the request.
		/// Return false (0) to proceed with default handling. With the Chrome
		/// runtime, default handling will display the permission prompt UI. With the
		/// Alloy runtime, default handling is CEF_PERMISSION_RESULT_IGNORE.
		/// </summary>
		[NativeName("on_show_permission_prompt")]
		public unsafe int OnShowPermissionPrompt(cef_browser_t* browser, ulong prompt_id, [Immutable]cef_string_t* requesting_origin, uint requested_permissions, cef_permission_prompt_callback_t* callback)
		{
			fixed (cef_permission_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_permission_handler_t*, cef_browser_t*, ulong, cef_string_t*, uint, cef_permission_prompt_callback_t*, int>)on_show_permission_prompt)(self, browser, prompt_id, requesting_origin, requested_permissions, callback);
			}
		}

		/// <summary>
		/// void (*)(_cef_permission_handler_t* self, _cef_browser_t* browser, uint64 prompt_id, cef_permission_request_result_t result)*
		/// </summary>
		public void* on_dismiss_permission_prompt;

		/// <summary>
		/// Called when a permission prompt handled via OnShowPermissionPrompt is
		/// dismissed. |prompt_id| will match the value that was passed to
		/// OnShowPermissionPrompt. |result| will be the value passed to
		/// cef_permission_prompt_callback_t::Continue or CEF_PERMISSION_RESULT_IGNORE
		/// if the dialog was dismissed for other reasons such as navigation, browser
		/// closure, etc. This function will not be called if OnShowPermissionPrompt
		/// returned false (0) for |prompt_id|.
		/// </summary>
		[NativeName("on_dismiss_permission_prompt")]
		public unsafe void OnDismissPermissionPrompt(cef_browser_t* browser, ulong prompt_id, CefPermissionRequestResult result)
		{
			fixed (cef_permission_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_permission_handler_t*, cef_browser_t*, ulong, CefPermissionRequestResult, void>)on_dismiss_permission_prompt)(self, browser, prompt_id, result);
			}
		}
	}
}

