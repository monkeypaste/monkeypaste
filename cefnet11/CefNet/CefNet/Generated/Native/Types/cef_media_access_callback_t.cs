// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_permission_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Callback structure used for asynchronous continuation of media access
	/// permission requests.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_media_access_callback_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// void (*)(_cef_media_access_callback_t* self, uint32 allowed_permissions)*
		/// </summary>
		public void* cont;

		/// <summary>
		/// Call to allow or deny media access. If this callback was initiated in
		/// response to a getUserMedia (indicated by
		/// CEF_MEDIA_PERMISSION_DEVICE_AUDIO_CAPTURE and/or
		/// CEF_MEDIA_PERMISSION_DEVICE_VIDEO_CAPTURE being set) then
		/// |allowed_permissions| must match |required_permissions| passed to
		/// OnRequestMediaAccessPermission.
		/// </summary>
		[NativeName("cont")]
		public unsafe void Continue(uint allowed_permissions)
		{
			fixed (cef_media_access_callback_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_media_access_callback_t*, uint, void>)cont)(self, allowed_permissions);
			}
		}

		/// <summary>
		/// void (*)(_cef_media_access_callback_t* self)*
		/// </summary>
		public void* cancel;

		/// <summary>
		/// Cancel the media access request.
		/// </summary>
		[NativeName("cancel")]
		public unsafe void Cancel()
		{
			fixed (cef_media_access_callback_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_media_access_callback_t*, void>)cancel)(self);
			}
		}
	}
}

