// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_command_handler_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Implement this structure to handle events related to commands. The functions
	/// of this structure will be called on the UI thread.
	/// </summary>
	/// <remarks>
	/// Role: Handler
	/// </remarks>
	public unsafe partial class CefCommandHandler : CefBaseRefCounted<cef_command_handler_t>, ICefCommandHandlerPrivate
	{
#if NET_LESS_5_0
		private static readonly OnChromeCommandDelegate fnOnChromeCommand = OnChromeCommandImpl;

#endif // NET_LESS_5_0
		internal static unsafe CefCommandHandler Create(IntPtr instance)
		{
			return new CefCommandHandler((cef_command_handler_t*)instance);
		}

		public CefCommandHandler()
		{
			cef_command_handler_t* self = this.NativeInstance;
			#if NET_LESS_5_0
			self->on_chrome_command = (void*)Marshal.GetFunctionPointerForDelegate(fnOnChromeCommand);
			#else
			self->on_chrome_command = (delegate* unmanaged[Stdcall]<cef_command_handler_t*, cef_browser_t*, int, CefWindowOpenDisposition, int>)&OnChromeCommandImpl;
			#endif
		}

		public CefCommandHandler(cef_command_handler_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefCommandHandlerPrivate.AvoidOnChromeCommand();

		/// <summary>
		/// Called to execute a Chrome command triggered via menu selection or
		/// keyboard shortcut. Values for |command_id| can be found in the
		/// cef_command_ids.h file. |disposition| provides information about the
		/// intended command target. Return true (1) if the command was handled or
		/// false (0) for the default implementation. For context menu commands this
		/// will be called after cef_context_menu_handler_t::OnContextMenuCommand.
		/// Only used with the Chrome runtime.
		/// </summary>
		protected internal unsafe virtual bool OnChromeCommand(CefBrowser browser, int commandId, CefWindowOpenDisposition disposition)
		{
			return default;
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate int OnChromeCommandDelegate(cef_command_handler_t* self, cef_browser_t* browser, int command_id, CefWindowOpenDisposition disposition);

#endif // NET_LESS_5_0
		// int (*)(_cef_command_handler_t* self, _cef_browser_t* browser, int command_id, cef_window_open_disposition_t disposition)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe int OnChromeCommandImpl(cef_command_handler_t* self, cef_browser_t* browser, int command_id, CefWindowOpenDisposition disposition)
		{
			var instance = GetInstance((IntPtr)self) as CefCommandHandler;
			if (instance == null || ((ICefCommandHandlerPrivate)instance).AvoidOnChromeCommand())
			{
				ReleaseIfNonNull((cef_base_ref_counted_t*)browser);
				return default;
			}
			return instance.OnChromeCommand(CefBrowser.Wrap(CefBrowser.Create, browser), command_id, disposition) ? 1 : 0;
		}
	}
}
