// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_permission_handler_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Implement this structure to handle events related to permission requests.
	/// The functions of this structure will be called on the browser process UI
	/// thread.
	/// </summary>
	/// <remarks>
	/// Role: Handler
	/// </remarks>
	public unsafe partial class CefPermissionHandler : CefBaseRefCounted<cef_permission_handler_t>, ICefPermissionHandlerPrivate
	{
#if NET_LESS_5_0
		private static readonly OnRequestMediaAccessPermissionDelegate fnOnRequestMediaAccessPermission = OnRequestMediaAccessPermissionImpl;

		private static readonly OnShowPermissionPromptDelegate fnOnShowPermissionPrompt = OnShowPermissionPromptImpl;

		private static readonly OnDismissPermissionPromptDelegate fnOnDismissPermissionPrompt = OnDismissPermissionPromptImpl;

#endif // NET_LESS_5_0
		internal static unsafe CefPermissionHandler Create(IntPtr instance)
		{
			return new CefPermissionHandler((cef_permission_handler_t*)instance);
		}

		public CefPermissionHandler()
		{
			cef_permission_handler_t* self = this.NativeInstance;
			#if NET_LESS_5_0
			self->on_request_media_access_permission = (void*)Marshal.GetFunctionPointerForDelegate(fnOnRequestMediaAccessPermission);
			self->on_show_permission_prompt = (void*)Marshal.GetFunctionPointerForDelegate(fnOnShowPermissionPrompt);
			self->on_dismiss_permission_prompt = (void*)Marshal.GetFunctionPointerForDelegate(fnOnDismissPermissionPrompt);
			#else
			self->on_request_media_access_permission = (delegate* unmanaged[Stdcall]<cef_permission_handler_t*, cef_browser_t*, cef_frame_t*, cef_string_t*, uint, cef_media_access_callback_t*, int>)&OnRequestMediaAccessPermissionImpl;
			self->on_show_permission_prompt = (delegate* unmanaged[Stdcall]<cef_permission_handler_t*, cef_browser_t*, ulong, cef_string_t*, uint, cef_permission_prompt_callback_t*, int>)&OnShowPermissionPromptImpl;
			self->on_dismiss_permission_prompt = (delegate* unmanaged[Stdcall]<cef_permission_handler_t*, cef_browser_t*, ulong, CefPermissionRequestResult, void>)&OnDismissPermissionPromptImpl;
			#endif
		}

		public CefPermissionHandler(cef_permission_handler_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefPermissionHandlerPrivate.AvoidOnRequestMediaAccessPermission();

		/// <summary>
		/// Called when a page requests permission to access media.
		/// |requesting_origin| is the URL origin requesting permission.
		/// |requested_permissions| is a combination of values from
		/// cef_media_access_permission_types_t that represent the requested
		/// permissions. Return true (1) and call cef_media_access_callback_t
		/// functions either in this function or at a later time to continue or cancel
		/// the request. Return false (0) to proceed with default handling. With the
		/// Chrome runtime, default handling will display the permission request UI.
		/// With the Alloy runtime, default handling will deny the request. This
		/// function will not be called if the &quot;--enable-media-stream&quot; command-line
		/// switch is used to grant all permissions.
		/// </summary>
		protected internal unsafe virtual bool OnRequestMediaAccessPermission(CefBrowser browser, CefFrame frame, string requestingOrigin, uint requestedPermissions, CefMediaAccessCallback callback)
		{
			return default;
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate int OnRequestMediaAccessPermissionDelegate(cef_permission_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_string_t* requesting_origin, uint requested_permissions, cef_media_access_callback_t* callback);

#endif // NET_LESS_5_0
		// int (*)(_cef_permission_handler_t* self, _cef_browser_t* browser, _cef_frame_t* frame, const cef_string_t* requesting_origin, uint32 requested_permissions, _cef_media_access_callback_t* callback)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe int OnRequestMediaAccessPermissionImpl(cef_permission_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_string_t* requesting_origin, uint requested_permissions, cef_media_access_callback_t* callback)
		{
			var instance = GetInstance((IntPtr)self) as CefPermissionHandler;
			if (instance == null || ((ICefPermissionHandlerPrivate)instance).AvoidOnRequestMediaAccessPermission())
			{
				ReleaseIfNonNull((cef_base_ref_counted_t*)browser);
				ReleaseIfNonNull((cef_base_ref_counted_t*)frame);
				ReleaseIfNonNull((cef_base_ref_counted_t*)callback);
				return default;
			}
			return instance.OnRequestMediaAccessPermission(CefBrowser.Wrap(CefBrowser.Create, browser), CefFrame.Wrap(CefFrame.Create, frame), CefString.Read(requesting_origin), requested_permissions, CefMediaAccessCallback.Wrap(CefMediaAccessCallback.Create, callback)) ? 1 : 0;
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefPermissionHandlerPrivate.AvoidOnShowPermissionPrompt();

		/// <summary>
		/// Called when a page should show a permission prompt. |prompt_id| uniquely
		/// identifies the prompt. |requesting_origin| is the URL origin requesting
		/// permission. |requested_permissions| is a combination of values from
		/// cef_permission_request_types_t that represent the requested permissions.
		/// Return true (1) and call cef_permission_prompt_callback_t::Continue either
		/// in this function or at a later time to continue or cancel the request.
		/// Return false (0) to proceed with default handling. With the Chrome
		/// runtime, default handling will display the permission prompt UI. With the
		/// Alloy runtime, default handling is CEF_PERMISSION_RESULT_IGNORE.
		/// </summary>
		protected internal unsafe virtual bool OnShowPermissionPrompt(CefBrowser browser, ulong promptId, string requestingOrigin, uint requestedPermissions, CefPermissionPromptCallback callback)
		{
			return default;
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate int OnShowPermissionPromptDelegate(cef_permission_handler_t* self, cef_browser_t* browser, ulong prompt_id, cef_string_t* requesting_origin, uint requested_permissions, cef_permission_prompt_callback_t* callback);

#endif // NET_LESS_5_0
		// int (*)(_cef_permission_handler_t* self, _cef_browser_t* browser, uint64 prompt_id, const cef_string_t* requesting_origin, uint32 requested_permissions, _cef_permission_prompt_callback_t* callback)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe int OnShowPermissionPromptImpl(cef_permission_handler_t* self, cef_browser_t* browser, ulong prompt_id, cef_string_t* requesting_origin, uint requested_permissions, cef_permission_prompt_callback_t* callback)
		{
			var instance = GetInstance((IntPtr)self) as CefPermissionHandler;
			if (instance == null || ((ICefPermissionHandlerPrivate)instance).AvoidOnShowPermissionPrompt())
			{
				ReleaseIfNonNull((cef_base_ref_counted_t*)browser);
				ReleaseIfNonNull((cef_base_ref_counted_t*)callback);
				return default;
			}
			return instance.OnShowPermissionPrompt(CefBrowser.Wrap(CefBrowser.Create, browser), prompt_id, CefString.Read(requesting_origin), requested_permissions, CefPermissionPromptCallback.Wrap(CefPermissionPromptCallback.Create, callback)) ? 1 : 0;
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefPermissionHandlerPrivate.AvoidOnDismissPermissionPrompt();

		/// <summary>
		/// Called when a permission prompt handled via OnShowPermissionPrompt is
		/// dismissed. |prompt_id| will match the value that was passed to
		/// OnShowPermissionPrompt. |result| will be the value passed to
		/// cef_permission_prompt_callback_t::Continue or CEF_PERMISSION_RESULT_IGNORE
		/// if the dialog was dismissed for other reasons such as navigation, browser
		/// closure, etc. This function will not be called if OnShowPermissionPrompt
		/// returned false (0) for |prompt_id|.
		/// </summary>
		protected internal unsafe virtual void OnDismissPermissionPrompt(CefBrowser browser, ulong promptId, CefPermissionRequestResult result)
		{
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate void OnDismissPermissionPromptDelegate(cef_permission_handler_t* self, cef_browser_t* browser, ulong prompt_id, CefPermissionRequestResult result);

#endif // NET_LESS_5_0
		// void (*)(_cef_permission_handler_t* self, _cef_browser_t* browser, uint64 prompt_id, cef_permission_request_result_t result)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe void OnDismissPermissionPromptImpl(cef_permission_handler_t* self, cef_browser_t* browser, ulong prompt_id, CefPermissionRequestResult result)
		{
			var instance = GetInstance((IntPtr)self) as CefPermissionHandler;
			if (instance == null || ((ICefPermissionHandlerPrivate)instance).AvoidOnDismissPermissionPrompt())
			{
				ReleaseIfNonNull((cef_base_ref_counted_t*)browser);
				return;
			}
			instance.OnDismissPermissionPrompt(CefBrowser.Wrap(CefBrowser.Create, browser), prompt_id, result);
		}
	}
}
