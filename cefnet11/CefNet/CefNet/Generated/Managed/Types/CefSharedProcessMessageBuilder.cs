// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_shared_process_message_builder_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Structure that builds a cef_process_message_t containing a shared memory
	/// region. This structure is not thread-safe but may be used exclusively on a
	/// different thread from the one which constructed it.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial class CefSharedProcessMessageBuilder : CefBaseRefCounted<cef_shared_process_message_builder_t>
	{
		internal static unsafe CefSharedProcessMessageBuilder Create(IntPtr instance)
		{
			return new CefSharedProcessMessageBuilder((cef_shared_process_message_builder_t*)instance);
		}

		public CefSharedProcessMessageBuilder(cef_shared_process_message_builder_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		/// <summary>
		/// Gets a value indicating whether the builder is valid.
		/// </summary>
		public unsafe virtual bool IsValid
		{
			get
			{
				return SafeCall(NativeInstance->IsValid() != 0);
			}
		}

		/// <summary>
		/// Returns the size of the shared memory region in bytes. Returns 0 for
		/// invalid instances.
		/// </summary>
		public unsafe virtual long Size()
		{
			return SafeCall((long)NativeInstance->Size());
		}

		/// <summary>
		/// Returns the pointer to the writable memory. Returns nullptr for invalid
		/// instances. The returned pointer is only valid for the life span of this
		/// object.
		/// </summary>
		public unsafe virtual IntPtr Memory()
		{
			return SafeCall(NativeInstance->Memory());
		}

		/// <summary>
		/// Creates a new cef_process_message_t from the data provided to the builder.
		/// Returns nullptr for invalid instances. Invalidates the builder instance.
		/// </summary>
		public unsafe virtual CefProcessMessage Build()
		{
			return SafeCall(CefProcessMessage.Wrap(CefProcessMessage.Create, NativeInstance->Build()));
		}
	}
}
