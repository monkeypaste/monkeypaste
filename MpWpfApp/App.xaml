<Application x:Class="MpWpfApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:d1p1="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:local="clr-namespace:MpWpfApp"
             xmlns:pcl="clr-namespace:MonkeyPaste;assembly=MonkeyPaste"
             xmlns:s="clr-namespace:System;assembly=mscorlib"
             d1p1:Ignorable="d"
             DispatcherUnhandledException="Application_DispatcherUnhandledException"
             Exit="Application_Exit">
    <Application.Resources>
        <!--<Style TargetType="{x:Type ItemsControl}">
            <Setter Property="HorizontalAlignment"
                    Value="Left" />
            <Setter Property="VerticalAlignment"
                    Value="Top" />
        </Style>-->

        <!--  Settings Tab Indexes  -->
        <s:Int32 x:Key="SettingsTabAccount">0</s:Int32>
        <s:Int32 x:Key="SettingsTabPreferences">1</s:Int32>
        <s:Int32 x:Key="SettingsTabSecurity">2</s:Int32>
        <s:Int32 x:Key="SettingsTabShortcuts">3</s:Int32>
        <s:Int32 x:Key="SettingsTabHelp">4</s:Int32>
        <!--  Settings Tab Indexes End  -->

        <!--  Command Parameter Primitives  -->
        <s:Int32 x:Key="Files">1</s:Int32>
        <s:Int32 x:Key="Csv">2</s:Int32>
        <s:Int32 x:Key="Zip">3</s:Int32>
        <s:Int32 x:Key="Up">-1</s:Int32>
        <s:Int32 x:Key="Down">1</s:Int32>

        <s:Boolean x:Key="True">True</s:Boolean>
        <s:Boolean x:Key="False">False</s:Boolean>

        <s:String x:Key="SecondarySource">SecondarySource</s:String>
        <s:String x:Key="Hide">Hide</s:String>
        <s:String x:Key="Collapse">Collapse</s:String>
        <s:String x:Key="TemplateHyperlinkTag">TemplateHyperlink</s:String>
        <!--  Command Parameter Primitives End  -->

        <!--  Cursor Source Paths  -->
        <s:String x:Key="CopyCursor">Resources\Cursors\copy.cur</s:String>
        <s:String x:Key="HandOpenCursor">Resources\Cursors\hand_open.cur</s:String>
        <s:String x:Key="HandClosedCursor">Resources\Cursors\hand_closed.cur</s:String>
        <!--  Cursor Source Paths END  -->

        <!--  Icon/Image Source Paths  -->
        <s:String x:Key="AppIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/monkey(2).png</s:String>
        <s:String x:Key="NoEntryIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/noentry.png</s:String>
        <s:String x:Key="RobotClawIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/robotclaw.png</s:String>
        <s:String x:Key="BrainIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/brain.png</s:String>
        <s:String x:Key="BrainWhiteIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/brainwhite.png</s:String>
        <s:String x:Key="NoneClickIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/noneclick.png</s:String>
        <s:String x:Key="LeftClickIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/leftclick.png</s:String>
        <s:String x:Key="RightClickIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/rightclick.png</s:String>
        <s:String x:Key="BothClickIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/bothclick.png</s:String>
        <s:String x:Key="AppendIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/append.png</s:String>
        <s:String x:Key="AppendLineIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/appendline.png</s:String>
        <s:String x:Key="AppendRunIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/caret.png</s:String>
        <s:String x:Key="HelpIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/help.png</s:String>
        <s:String x:Key="PlayIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/play.png</s:String>
        <s:String x:Key="PauseIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/pause.png</s:String>
        <s:String x:Key="CogIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/cog.png</s:String>
        <s:String x:Key="LockIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/lock.png</s:String>
        <s:String x:Key="ExecuteIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/execute.png</s:String>
        <s:String x:Key="PasteIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/paste.png</s:String>
        <s:String x:Key="DeleteIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/Delete.png</s:String>
        <s:String x:Key="EditIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/edit.png</s:String>
        <s:String x:Key="EditContentIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/caret.png</s:String>
        <s:String x:Key="ToolsIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/tools.png</s:String>
        <s:String x:Key="RenameIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/rename.png</s:String>
        <s:String x:Key="DuplicateIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/duplicate.png</s:String>
        <s:String x:Key="MergeIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/merge.png</s:String>
        <s:String x:Key="EmailIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/email.png</s:String>
        <s:String x:Key="QrIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/qr.png</s:String>
        <s:String x:Key="SpeakIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/speak.png</s:String>
        <s:String x:Key="SearchIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/web.png</s:String>
        <s:String x:Key="GoogleIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/googleIcon.png</s:String>
        <s:String x:Key="BingIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/bingIcon.png</s:String>
        <s:String x:Key="DuckIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/duckduckgoIcon.png</s:String>
        <s:String x:Key="YandexIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/yandexIcon.png</s:String>
        <s:String x:Key="SelectionIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/selection.png</s:String>
        <s:String x:Key="BringToFrontIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/bringToFront.png</s:String>
        <s:String x:Key="SendToBackIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/sendToBack.png</s:String>
        <s:String x:Key="SelectAllIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/selectall.png</s:String>
        <s:String x:Key="InvertSelectionIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/invertSelection.png</s:String>
        <s:String x:Key="HotkeyIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/joystick2.png</s:String>
        <s:String x:Key="HotkeyActiveIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/joystickactive2.png</s:String>
        <s:String x:Key="PasteToAppIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/bullseye.png</s:String>
        <s:String x:Key="BullsEyeIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/bullseye.png</s:String>
        <s:String x:Key="PinToCollectionIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/tag.png</s:String>
        <s:String x:Key="OpenEyeIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/eye.png</s:String>
        <s:String x:Key="ClosedEyeIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/eye_closed.png</s:String>
        <s:String x:Key="TranslateIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/translate.png</s:String>
        <s:String x:Key="UserIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/user.png</s:String>
        <s:String x:Key="SlidersIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/sliders.png</s:String>
        <s:String x:Key="ShieldIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/shield.png</s:String>
        <s:String x:Key="SignOutIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/signout.png</s:String>
        <s:String x:Key="CopyIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/copy.png</s:String>
        <s:String x:Key="WarningIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/warning.png</s:String>
        <s:String x:Key="SaveIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/save.png</s:String>
        <s:String x:Key="ResetIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/reset.png</s:String>
        <s:String x:Key="AscendingIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/asc_black.png</s:String>
        <s:String x:Key="DecendingIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/desc_black.png</s:String>
        <s:String x:Key="AscendingIcon_Disabled">pack://application:,,,/MpWpfApp;component/Resources/Images/asc_gray.png</s:String>
        <s:String x:Key="DecendingIcon_Disabled">pack://application:,,,/MpWpfApp;component/Resources/Images/desc_gray.png</s:String>
        <s:String x:Key="FrameGripTile">pack://application:,,,/MpWpfApp;component/Resources/Images/frame_grip.png</s:String>
        <s:String x:Key="TrashCanIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/trashcan.png</s:String>
        <s:String x:Key="AddIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/add.png</s:String>
        <s:String x:Key="PinIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/pin.png</s:String>
        <s:String x:Key="PinOverIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/pinover.png</s:String>
        <s:String x:Key="PinDownIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/pindown.png</s:String>
        <s:String x:Key="PinDownOverIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/pindownover.png</s:String>
        <s:String x:Key="PlusIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/add2.png</s:String>
        <s:String x:Key="MinusIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/minus2.png</s:String>
        <s:String x:Key="BoltIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/bolt.png</s:String>
        <s:String x:Key="ScalesIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/scales.png</s:String>
        <s:String x:Key="FolderEventIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/fileSystemEvent.png</s:String>
        <s:String x:Key="ChainIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/chain.png</s:String>
        <s:String x:Key="CheckIcon">pack://application:,,,/MpWpfApp;component/Resources/Images/check.png</s:String>
        <!--  Icon/Image Source Paths End  -->

        <!--  Font Awesome  -->

        <FontFamily x:Key="FontAwesomeSolid">/MpWpfApp;component/Resources/Icons/FontAwesome/FontAwesome5Solid.otf#Font Awesome 5 Free Solid</FontFamily>
        <FontFamily x:Key="FontAwesomeRegular">/MpWpfApp;component/Resources/Icons/FontAwesome/FontAwesome5Regular.otf#Font Awesome 5 Free Regular</FontFamily>
        <FontFamily x:Key="FontAwesomeBrands">/MpWpfApp;component/Resources/Icons/FontAwesome/FontAwesome5Brands.otf#Font Awesome 5 Brands Regular</FontFamily>

        <s:String x:Key="TranslateIcon_FAS">f1ab</s:String>

        <!--  Font Awesome End  -->

        <!--  Color Palletes  -->
        <SolidColorBrush x:Key="AppColorDark">DarkViolet</SolidColorBrush>
        <SolidColorBrush x:Key="AppColorLight">MediumPurple</SolidColorBrush>
        <SolidColorBrush x:Key="ClipTileTitleTextBoxBackgroundBrush"
                         Opacity="0.5"
                         Color="White" />
        <SolidColorBrush x:Key="ClipTileDetectedObjectTextBoxBackgroundBrush"
                         Opacity="0.5"
                         Color="Black" />
        <!--  Color Palletes End  -->

        <!--  Converter Declarations  -->
        <local:MpVisibilityToBoolConverter x:Key="VisibilityToBoolConverter" />
        <local:MpImageSourceToBitmapSourceConverter x:Key="ImageSourceToBitmapSourceConverter" />
        <local:MpIntToMpRoutingTypeConverter x:Key="IntToMpRoutingTypeConverter" />
        <local:MpIntToWindowCommandConverter x:Key="IntToWindowCommandConverter" />
        <local:MpStringResourceToImageSourceConverter x:Key="StringToImageSourceConverter" />
        <local:MpStringResourceToIconConverter x:Key="StringToIconConverter" />
        <local:MpStringHexToBrushConverter x:Key="StringToBrushConverter" />
        <local:MpPointCollectionConverter x:Key="PointCollectionConverter" />
        <local:MpIntToStringConverter x:Key="IntToStringConverter" />
        <local:MpBoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
        <local:MpBoolToVisibilityFlipConverter x:Key="BoolToVisibilityFlipConverter" />
        <local:MpSolidColorBrushToBrushConverter x:Key="SolidColorBrushToBrushConverter" />
        <local:MpBase64StringToBitmapSourceConverter x:Key="Base64StringToBitmapSourceConverter" />
        <local:MpBrushToImageConverter x:Key="BrushToImageConverter" />
        <local:MpDoubleToThicknessConverter x:Key="DoubleToThicknessConverter" />
        <local:MpBrushToColorConverter x:Key="BrushToColorConverter" />
        <local:MpBoolToCursorConverter x:Key="BoolToCursorConverter" />
        <local:MpBoolToHAlignmentConverter x:Key="BoolToHAlignmentConverter" />
        <local:MpAbsoluteToRelativePathStringConverter x:Key="AbsoluteToRelativePathStringConverter" />
        <local:MpFilePathStringToIconConverter x:Key="FilePathStringToIconConverter" />
        <local:MpFilePathToFolderPathConverter x:Key="FilePathToFolderPathConverter" />
        <local:MpMultiBoolToVisibilityConverter x:Key="MultiBoolToVisibilityConverter" />
        <local:MpMultiBoolToVisibilityFlipConverter x:Key="MultiBoolToVisibilityFlipConverter" />
        <local:MpBoolFlipConverter x:Key="BoolFlipConverter" />
        <local:MpMultiObjectToTupleConverter x:Key="MultiObjectToTupleConverter" />
        <local:MpBase64StringToIconConverter x:Key="Base64StringToIconConverter" />
        <local:MpBoolToScrollBarVisibilityConverter x:Key="BoolToScrollBarVisibilityConverter" />
        <local:MpBoolToScrollBarVisibilityFlipConverter x:Key="BoolToScrollBarVisibilityFlipConverter" />
        <local:MpNegateDoubleConverter x:Key="NegateDoubleConverter" />
        <local:MpBackgroundBrushToForegroundBrushConverter x:Key="BackgroundBrushToForegroundBrushConverter" />
        <local:MpBoolToImageSourceConverter x:Key="BoolToImageSourceConverter" />
        <local:MpBoolToIconSourceConverter x:Key="BoolToIconSourceConverter" />
        <local:MpBoolToBrushConverter x:Key="BoolToBrushConverter" />
        <local:MpEnumStringToKeyLiteralStringConverter x:Key="EnumStringToKeyLiteralStringConverter" />
        <local:MpBase64StringToBitmapSourceConverter x:Key="Base64ToImageBrushConverter" />
        <local:MpStringToDateTimeConverter x:Key="StringToDateTimeConverter" />
        <local:MpSourceIdToImageSourceConverter x:Key="SourceIdToImageSourceConverter" />
        <local:MpSourceIdToImageSourceBorderConverter x:Key="SourceIdToImageSourceBorderConverter" />
        <local:MpIconIdToImageSourceConverter x:Key="IconIdToImageSourceConverter" />
        <local:MpStringToThemeBrushConverter x:Key="StringToThemeBrushConverter" />
        <local:MpIconIdToIconConverter x:Key="IconIdToIconConverter" />
        <local:MpStringHexToIconConverter x:Key="HexStringToIconConverter" />
        <local:MpDbImageIdToIconConverter x:Key="DbImageIdToIconConverter" />
        <local:MpDbImageIdToBitmapSourceConverter x:Key="DbImageIdToBitmapSourceConverter" />
        <local:MpShorcutIdToKeyStringConverter x:Key="ShorcutIdToKeyStringConverter" />
        <!--  Converter Declarations End  -->

        <!--  Context Menu Resources  -->
        <local:MpContextMenuItemContainerSelector x:Key="MenuItemContainerSelector" />
        <!--  MenuItem  -->
        <HierarchicalDataTemplate x:Key="MenuItem"
                                  DataType="{x:Type pcl:MpMenuItemViewModel}"
                                  ItemsSource="{Binding SubItems}">
            <MenuItem Header="{Binding Header}"
                      Command="{Binding Command}"
                      CommandParameter="{Binding CommandParameter}"
                      Icon="{Binding IconResourceKey,
                                     Converter={StaticResource StringToIconConverter}}"
                      ItemsSource="{Binding SubItems}"
                      InputGestureText="{Binding InputGestureText}"
                      UsesItemContainerTemplate="true"
                      ItemContainerTemplateSelector="{StaticResource MenuItemContainerSelector}" />
        </HierarchicalDataTemplate>
        <!--  User MenuItem  -->
        <HierarchicalDataTemplate x:Key="UserMenuItem"
                                  DataType="{x:Type pcl:MpMenuItemViewModel}"
                                  ItemsSource="{Binding SubItems}">
            <MenuItem Header="{Binding Header}"
                      Command="{Binding Command}"
                      CommandParameter="{Binding CommandParameter}"
                      Icon="{Binding IconId,
                                     Converter={StaticResource IconIdToIconConverter}}"
                      InputGestureText="{Binding InputGestureText}"
                      UsesItemContainerTemplate="true"
                      ItemContainerTemplateSelector="{StaticResource MenuItemContainerSelector}" />
        </HierarchicalDataTemplate>
        <!--  Checked Tag Menu Item  -->
        <HierarchicalDataTemplate x:Key="CheckedTagMenuItem"
                                  DataType="{x:Type pcl:MpMenuItemViewModel}"
                                  ItemsSource="{Binding SubItems}">
            <!--  Currently only for Tags  -->
            <MenuItem Header="{Binding Header}"
                      Command="{Binding Command}"
                      CommandParameter="{Binding CommandParameter}"
                      Icon="{Binding IconHexStr,
                                     Converter={StaticResource HexStringToIconConverter},
                                     ConverterParameter=checked}"
                      InputGestureText="{Binding InputGestureText}"
                      UsesItemContainerTemplate="true"
                      ItemContainerTemplateSelector="{StaticResource MenuItemContainerSelector}" />
        </HierarchicalDataTemplate>
        <!--  Unchecked Tag Menu Item  -->
        <HierarchicalDataTemplate x:Key="UncheckedTagMenuItem"
                                  DataType="{x:Type pcl:MpMenuItemViewModel}"
                                  ItemsSource="{Binding SubItems}">
            <!--  Currently only for Tags  -->
            <MenuItem Header="{Binding Header}"
                      Command="{Binding Command}"
                      CommandParameter="{Binding CommandParameter}"
                      Icon="{Binding IconHexStr,
                                     Converter={StaticResource HexStringToIconConverter}}"
                      InputGestureText="{Binding InputGestureText}"
                      UsesItemContainerTemplate="true"
                      ItemContainerTemplateSelector="{StaticResource MenuItemContainerSelector}" />
        </HierarchicalDataTemplate>
        <!--  Paste To Path Runtime Item  -->
        <DataTemplate x:Key="PasteToPathRuntimeMenuItem"
                      DataType="{x:Type pcl:MpMenuItemViewModel}">
            <MenuItem Visibility="{Binding IsVisible,
                                           Converter={StaticResource BoolToVisibilityConverter}}"
                      Command="{Binding Command}"
                      CommandParameter="{Binding CommandParameter}">
                <MenuItem.Icon>
                    <Image Source="{Binding IconId, Converter={StaticResource IconIdToImageSourceConverter}}" />
                </MenuItem.Icon>
                <MenuItem.Header>
                    <DockPanel LastChildFill="False">
                        <Label DockPanel.Dock="Left"
                               Content="{Binding Header}" />
                        <Button DockPanel.Dock="Right"
                                local:MpHoverableExtension.IsEnabled="True"
                                local:MpHoverableExtension.IsHovering="{Binding CanHide,
                                                                                Mode=TwoWay}"
                                Cursor="Hand"
                                BorderThickness="0"
                                Background="Transparent"
                                Width="20"
                                Height="20"
                                HorizontalAlignment="Right"
                                Command="{Binding HideHandleCommand,
                                                  Source={x:Static local:MpPasteToAppPathViewModelCollection.Instance}}"
                                CommandParameter="{Binding CommandParameter}">
                            <StackPanel>
                                <Image Visibility="{Binding CanHide,
                                                            Converter={StaticResource BoolToVisibilityFlipConverter}}"
                                       Source="{Binding .,
                                                        Source={StaticResource OpenEyeIcon}}"
                                       Width="20"
                                       Height="20" />
                                <Image Visibility="{Binding CanHide,
                                                            Converter={StaticResource BoolToVisibilityConverter}}"
                                       Source="{Binding .,
                                                        Source={StaticResource ClosedEyeIcon}}"
                                       Width="20"
                                       Height="20" />
                            </StackPanel>
                        </Button>
                    </DockPanel>
                </MenuItem.Header>
            </MenuItem>
        </DataTemplate>
        <!--  Seperator  -->
        <DataTemplate x:Key="SeperatorMenuItem"
                      DataType="{x:Type pcl:MpMenuItemViewModel}">
            <Separator />
        </DataTemplate>
        <!--  Color Pallete ListBox Menu Item  -->
        <DataTemplate x:Key="ColorPalleteMenuItem"
                      DataType="{x:Type pcl:MpMenuItemViewModel}">
            <MenuItem>
                <MenuItem.Header>
                    <ListBox ItemsSource="{Binding SubItems}"
                             Margin="5"
                             BorderThickness="0"
                             Background="Transparent"
                             VerticalAlignment="Stretch"
                             VerticalContentAlignment="Top"
                             HorizontalAlignment="Left"
                             HorizontalContentAlignment="Left"
                             SelectionMode="Single"
                             ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                        <ListBox.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel MaxWidth="240"
                                           Orientation="Horizontal"
                                           IsItemsHost="True" />
                            </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="{x:Type ListBoxItem}">
                                <Setter Property="IsSelected"
                                        Value="{Binding IsSelected}" />
                                <Setter Property="FocusVisualStyle"
                                        Value="{x:Null}" />
                                <Setter Property="HorizontalContentAlignment"
                                        Value="Left" />
                                <Setter Property="VerticalContentAlignment"
                                        Value="Top" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                            <ContentPresenter />
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListBox.ItemContainerStyle>
                        <ListBox.ItemTemplate>
                            <!--  Color Pallete Item  -->
                            <DataTemplate>
                                <Button BorderThickness="0"
                                        Background="Transparent"
                                        Command="{Binding Command}"
                                        CommandParameter="{Binding CommandParameter}"
                                        local:MpHoverableExtension.IsEnabled="True"
                                        local:MpHoverableExtension.IsHovering="{Binding IsHovering,
                                                                                        Mode=TwoWay}">
                                    <Border BorderThickness="1"
                                            CornerRadius="2"
                                            Padding="2.5"
                                            Width="15"
                                            Height="15"
                                            BorderBrush="{Binding BorderHexColor,
                                                                  Converter={StaticResource StringToBrushConverter}}"
                                            Background="{Binding Header,
                                                                 Converter={StaticResource StringToBrushConverter}}">
                                        <Image Source="{Binding .,
                                                                Source={StaticResource PlusIcon}}"
                                               ToolTip="Custom Color..."
                                               ToolTipService.InitialShowDelay="1"
                                               Stretch="Fill"
                                               HorizontalAlignment="Stretch"
                                               VerticalAlignment="Stretch"
                                               Visibility="{Binding IsVisible,
                                                                    Converter={StaticResource BoolToVisibilityConverter},
                                                                    ConverterParameter={StaticResource Hide}}" />
                                    </Border>
                                </Button>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </MenuItem.Header>
            </MenuItem>
        </DataTemplate>



        <Style TargetType="{x:Type ItemsControl}">
            <Setter Property="HorizontalAlignment"
                    Value="Left" />
            <Setter Property="VerticalAlignment"
                    Value="Top" />
            <Setter Property="HorizontalContentAlignment"
                    Value="Left" />
            <Setter Property="VerticalContentAlignment"
                    Value="Top" />
        </Style>
        <Style TargetType="{x:Type ListBoxItem}">
            <Setter Property="HorizontalContentAlignment"
                    Value="Left" />
            <Setter Property="VerticalContentAlignment"
                    Value="Top" />
        </Style>
        <Style TargetType="{x:Type TreeViewItem}">
            <Setter Property="HorizontalContentAlignment"
                    Value="Left" />
            <Setter Property="VerticalContentAlignment"
                    Value="Top" />
        </Style>

        <!--  Context Menu Item  -->

        <Style x:Key="DefaultItemStyle"
               TargetType="{x:Type MenuItem}">
            <Setter Property="Header"
                    Value="{Binding Header}" />
            <Setter Property="Command"
                    Value="{Binding Command}" />
            <Setter Property="CommandParameter"
                    Value="{Binding CommandParameter}" />
            <Setter Property="Icon"
                    Value="{Binding Icon}" />
            <Setter Property="InputGestureText"
                    Value="{Binding InputGestureText}" />
            <Setter Property="IsCheckable"
                    Value="{Binding IsCheckable}" />
            <Setter Property="IsChecked"
                    Value="{Binding IsChecked}" />
            <Setter Property="ItemsSource"
                    Value="{Binding SubItems}" />
            <!--<Setter Property="ItemContainerStyle"
                    Value="{StaticResource DefaultItemStyle}"/>
            <Setter Property="ItemTemplateSelector"
                    Value="{StaticResource MenuItemSelector}"/>-->
        </Style>

        <!--  Color Pallete Menu Item  -->
        <Style x:Key="ColorPalleteMenuItemStyle"
               TargetType="{x:Type MenuItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border x:Name="Bd"
                                Uid="Border_38"
                                Padding="31,0,17,0"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="ContentPresenter"
                                              Uid="ContentPresenter_33"
                                              Grid.Column="1"
                                              Margin="{TemplateBinding Padding}"
                                              Content="{TemplateBinding Header}"
                                              ContentSource="Header"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted"
                                     Value="True">
                                <Setter TargetName="Bd"
                                        Property="Background"
                                        Value="#00FFFFFF" />
                                <Setter TargetName="Bd"
                                        Property="BorderBrush"
                                        Value="#00FFFFFF" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background"
                    Value="Transparent" />
            <Style.Triggers>
                <Trigger Property="IsHighlighted"
                         Value="True">
                    <Setter Property="Background"
                            Value="Transparent" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--  Button Templates Start  -->
        <!--  Button Colors  -->
        <Style x:Key="RoundedButton"
               TargetType="{x:Type Button}">
            <Setter Property="Background"
                    Value="Transparent" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Transparent"
                                BorderThickness="1"
                                CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"
                                     Value="True">
                                <Setter Property="BorderBrush"
                                        TargetName="border"
                                        Value="Yellow" />
                            </Trigger>
                            <Trigger Property="IsPressed"
                                     Value="True">
                                <Setter Property="BorderBrush"
                                        TargetName="border"
                                        Value="HotPink" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="RoundedButton_NoOutline"
               TargetType="{x:Type Button}">
            <Setter Property="Background"
                    Value="Transparent" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Transparent"
                                BorderThickness="1"
                                CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"
                                     Value="True">
                                <Setter Property="BorderBrush"
                                        TargetName="border"
                                        Value="Yellow" />
                            </Trigger>
                            <Trigger Property="IsPressed"
                                     Value="True">
                                <Setter Property="BorderBrush"
                                        TargetName="border"
                                        Value="HotPink" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FrameGripButton"
               TargetType="{x:Type Button}">
            <Setter Property="Background"
                    Value="Transparent" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border"
                                BorderBrush="Black"
                                BorderThickness="1"
                                CornerRadius="0">
                            <Border.Background>
                                <ImageBrush ImageSource="/Resources/Images/frame_grip.png"
                                            TileMode="Tile"
                                            Stretch="None"
                                            AlignmentX="Left"
                                            AlignmentY="Center" />
                            </Border.Background>
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"
                                     Value="True">
                                <Setter Property="BorderBrush"
                                        TargetName="border"
                                        Value="Yellow" />
                            </Trigger>
                            <Trigger Property="IsPressed"
                                     Value="True">
                                <Setter Property="BorderBrush"
                                        TargetName="border"
                                        Value="HotPink" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  Button Styles  -->
        <Style x:Key="Transparent_Button"
               TargetType="{x:Type Button}">
            <Setter Property="Background"
                    Value="Transparent" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Black"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"
                                     Value="True">
                                <Setter Property="Background"
                                        Value="Transparent" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="LockToggleButtonControlTemplate"
                         TargetType="{x:Type ToggleButton}">
            <Border x:Name="OuterBorder"
                    BorderBrush="Transparent"
                    BorderThickness="1"
                    CornerRadius="2">
                <Border x:Name="InnerBorder"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        CornerRadius="2">
                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      RecognizesAccessKey="True" />
                </Border>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver"
                         Value="True">
                    <Setter TargetName="OuterBorder"
                            Property="BorderBrush"
                            Value="#FF7CA0CC" />
                    <Setter TargetName="InnerBorder"
                            Property="BorderBrush"
                            Value="#FFE4EFFD" />
                    <Setter TargetName="InnerBorder"
                            Property="Background"
                            Value="#FFDAE7F5" />
                </Trigger>
                <Trigger Property="IsPressed"
                         Value="True">
                    <Setter TargetName="OuterBorder"
                            Property="BorderBrush"
                            Value="#FF2E4E76" />
                    <Setter TargetName="InnerBorder"
                            Property="BorderBrush"
                            Value="#FF116EE4" />
                    <Setter TargetName="InnerBorder"
                            Property="Background"
                            Value="#FF3272B8" />
                </Trigger>
                <Trigger Property="IsChecked"
                         Value="True">
                    <Setter TargetName="OuterBorder"
                            Property="BorderBrush"
                            Value="#FFFFC00A" />
                    <Setter TargetName="InnerBorder"
                            Property="BorderBrush"
                            Value="#FFFFDE7F" />
                    <Setter TargetName="InnerBorder"
                            Property="Background"
                            Value="#FFFFD458" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!--<Style x:Key="ArrowToggleStyle"
               TargetType="ToggleButton">
            <Setter Property="Background"
                    Value="Gray" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="TBOuterBorder"
                                BorderBrush="Transparent"
                                BorderThickness="1"
                                CornerRadius="2">
                            <Border x:Name="TBInnerBorder"
                                    Background="Transparent"
                                    BorderBrush="Transparent"
                                    BorderThickness="1"
                                    CornerRadius="2">
                                <ContentPresenter HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  RecognizesAccessKey="True"
                                                  Margin="{TemplateBinding Padding}" />
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"
                                     Value="True">
                                <Setter TargetName="OuterBorder"
                                        Property="BorderBrush"
                                        Value="#FF7CA0CC" />
                                <Setter TargetName="InnerBorder"
                                        Property="BorderBrush"
                                        Value="#FFE4EFFD" />
                                <Setter TargetName="InnerBorder"
                                        Property="Background"
                                        Value="Yellow" />
                            </Trigger>
                            <Trigger Property="IsPressed"
                                     Value="True">
                                <Setter TargetName="OuterBorder"
                                        Property="BorderBrush"
                                        Value="#FF2E4E76" />
                                <Setter TargetName="InnerBorder"
                                        Property="BorderBrush"
                                        Value="#FF116EE4" />
                                <Setter TargetName="InnerBorder"
                                        Property="Background"
                                        Value="#FF3272B8" />
                            </Trigger>
                            <Trigger Property="IsChecked"
                                     Value="True">
                                <Setter TargetName="OuterBorder"
                                        Property="BorderBrush"
                                        Value="#FFFFC00A" />
                                <Setter TargetName="InnerBorder"
                                        Property="BorderBrush"
                                        Value="#FFFFDE7F" />
                                <Setter TargetName="InnerBorder"
                                        Property="Background"
                                        Value="Green" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->
        <RadialGradientBrush x:Key="ToggleButtonCheckedBackground"
                             Center="0.5 0.5"
                             GradientOrigin="0.5 0.5"
                             RadiusX="3.5"
                             RadiusY="3.5">
            <RadialGradientBrush.GradientStops>
                <GradientStop Offset="0"
                              Color="Red" />
                <GradientStop Offset="0.1"
                              Color="Yellow" />
                <GradientStop Offset="0.9"
                              Color="Green" />
                <GradientStop Offset="5"
                              Color="Blue" />
            </RadialGradientBrush.GradientStops>
        </RadialGradientBrush>
        <ControlTemplate x:Key="AppModeToggleButtonControlTemplate"
                         TargetType="{x:Type ToggleButton}">
            <Border x:Name="AMTB_OuterBorder"
                    BorderThickness="1"
                    CornerRadius="2">
                <Border x:Name="AMTB_InnerBorder"
                        BorderThickness="1"
                        CornerRadius="2">
                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      RecognizesAccessKey="True" />
                </Border>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver"
                         Value="True">
                    <Setter TargetName="AMTB_OuterBorder"
                            Property="BorderBrush"
                            Value="#FF7CA0CC" />
                    <Setter TargetName="AMTB_InnerBorder"
                            Property="BorderBrush"
                            Value="Yellow" />
                    <Setter TargetName="AMTB_InnerBorder"
                            Property="Background"
                            Value="Transparent" />
                </Trigger>
                <Trigger Property="IsEnabled"
                         Value="False">
                    <Setter TargetName="AMTB_OuterBorder"
                            Property="BorderBrush"
                            Value="Transparent" />
                    <Setter TargetName="AMTB_InnerBorder"
                            Property="BorderBrush"
                            Value="Transparent" />
                    <Setter TargetName="AMTB_InnerBorder"
                            Property="Background"
                            Value="DimGray" />
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsEnabled"
                                   Value="True" />
                        <Condition Property="IsChecked"
                                   Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="AMTB_InnerBorder"
                            Property="Background"
                            Value="Lime" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsEnabled"
                                   Value="True" />
                        <Condition Property="IsChecked"
                                   Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="AMTB_InnerBorder"
                            Property="Background"
                            Value="LightGray" />
                </MultiTrigger>
                <Trigger Property="IsPressed"
                         Value="True">
                    <Setter TargetName="AMTB_OuterBorder"
                            Property="BorderBrush"
                            Value="#FF2E4E76" />
                    <Setter TargetName="AMTB_InnerBorder"
                            Property="BorderBrush"
                            Value="#FF116EE4" />
                    <Setter TargetName="AMTB_InnerBorder"
                            Property="Background"
                            Value="#FF3272B8" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="SearchButtonControlTemplate"
                         TargetType="{x:Type Button}">
            <Border x:Name="OuterBorder"
                    BorderBrush="Transparent"
                    BorderThickness="1"
                    CornerRadius="2">
                <Border x:Name="InnerBorder"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        CornerRadius="2">
                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      RecognizesAccessKey="True" />
                </Border>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver"
                         Value="True">
                    <Setter TargetName="OuterBorder"
                            Property="BorderBrush"
                            Value="#FF7CA0CC" />
                    <Setter TargetName="InnerBorder"
                            Property="BorderBrush"
                            Value="#FFE4EFFD" />
                    <Setter TargetName="InnerBorder"
                            Property="Background"
                            Value="#FFDAE7F5" />
                </Trigger>
                <Trigger Property="IsPressed"
                         Value="True">
                    <Setter TargetName="OuterBorder"
                            Property="BorderBrush"
                            Value="#FF2E4E76" />
                    <Setter TargetName="InnerBorder"
                            Property="BorderBrush"
                            Value="#FF116EE4" />
                    <Setter TargetName="InnerBorder"
                            Property="Background"
                            Value="#FF3272B8" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!--  Flat Button  -->
        <ControlTemplate x:Key="FlatButtonControlTemplate"
                         TargetType="{x:Type Button}">
            <Border x:Name="OuterBorder"
                    Margin="0,8,0,8"
                    BorderBrush="Transparent"
                    BorderThickness="1"
                    CornerRadius="2">
                <Border x:Name="InnerBorder"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        CornerRadius="2">
                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      RecognizesAccessKey="True" />
                </Border>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver"
                         Value="True">
                    <Setter TargetName="OuterBorder"
                            Property="BorderBrush"
                            Value="#FF7CA0CC" />
                    <Setter TargetName="InnerBorder"
                            Property="BorderBrush"
                            Value="#FFE4EFFD" />
                    <Setter TargetName="InnerBorder"
                            Property="Background"
                            Value="#FFDAE7F5" />
                </Trigger>
                <Trigger Property="IsPressed"
                         Value="True">
                    <Setter TargetName="OuterBorder"
                            Property="BorderBrush"
                            Value="#FF2E4E76" />
                    <Setter TargetName="InnerBorder"
                            Property="BorderBrush"
                            Value="#FF116EE4" />
                    <Setter TargetName="InnerBorder"
                            Property="Background"
                            Value="#FF3272B8" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!--  Flat Toggle Button  -->
        <ControlTemplate x:Key="FlatToggleButtonControlTemplate"
                         TargetType="{x:Type ToggleButton}">
            <Border x:Name="OuterBorder"
                    Margin="0,8,0,8"
                    BorderBrush="Transparent"
                    BorderThickness="1"
                    CornerRadius="2">
                <Border x:Name="InnerBorder"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        CornerRadius="2">
                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      RecognizesAccessKey="True" />
                </Border>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver"
                         Value="True">
                    <Setter TargetName="OuterBorder"
                            Property="BorderBrush"
                            Value="#FF7CA0CC" />
                    <Setter TargetName="InnerBorder"
                            Property="BorderBrush"
                            Value="#FFE4EFFD" />
                    <Setter TargetName="InnerBorder"
                            Property="Background"
                            Value="#FFDAE7F5" />
                </Trigger>
                <Trigger Property="IsPressed"
                         Value="True">
                    <Setter TargetName="OuterBorder"
                            Property="BorderBrush"
                            Value="#FF2E4E76" />
                    <Setter TargetName="InnerBorder"
                            Property="BorderBrush"
                            Value="#FF116EE4" />
                    <Setter TargetName="InnerBorder"
                            Property="Background"
                            Value="#FF3272B8" />
                </Trigger>
                <Trigger Property="IsChecked"
                         Value="True">
                    <Setter TargetName="OuterBorder"
                            Property="BorderBrush"
                            Value="#FFFFC00A" />
                    <Setter TargetName="InnerBorder"
                            Property="BorderBrush"
                            Value="#FFFFDE7F" />
                    <Setter TargetName="InnerBorder"
                            Property="Background"
                            Value="#FFFFD458" />

                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!--  Flat Repeat Button  -->
        <ControlTemplate x:Key="FlatRepeatButtonControlTemplate"
                         TargetType="{x:Type RepeatButton}">
            <Border x:Name="OuterBorder"
                    Margin="0"
                    BorderBrush="Transparent"
                    BorderThickness="1"
                    CornerRadius="2">
                <Border x:Name="InnerBorder"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        CornerRadius="2">
                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      RecognizesAccessKey="True" />
                </Border>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver"
                         Value="True">
                    <Setter TargetName="OuterBorder"
                            Property="BorderBrush"
                            Value="#FF7CA0CC" />
                    <Setter TargetName="InnerBorder"
                            Property="BorderBrush"
                            Value="#FFE4EFFD" />
                    <Setter TargetName="InnerBorder"
                            Property="Background"
                            Value="#FFDAE7F5" />
                </Trigger>
                <Trigger Property="IsPressed"
                         Value="True">
                    <Setter TargetName="OuterBorder"
                            Property="BorderBrush"
                            Value="#FF2E4E76" />
                    <Setter TargetName="InnerBorder"
                            Property="BorderBrush"
                            Value="#FF116EE4" />
                    <Setter TargetName="InnerBorder"
                            Property="Background"
                            Value="#FF3272B8" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!--  Button Templates End  -->

        <LinearGradientBrush x:Key="VerticalScrollBarBackground"
                             StartPoint="0,0"
                             EndPoint="1,0">
            <GradientStop Offset="0"
                          Color="#E1E1E1" />
            <GradientStop Offset="0.20"
                          Color="#EDEDED" />
            <GradientStop Offset="0.80"
                          Color="#EDEDED" />
            <GradientStop Offset="1"
                          Color="#E3E3E3" />
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ScrollBarDisabledBackground"
                         Color="#F4F4F4" />
        <Style x:Key="ScrollBarButton"
               TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle"
                    Value="true" />
            <Setter Property="Focusable"
                    Value="false" />
            <Setter Property="IsTabStop"
                    Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Microsoft_Windows_Themes:ScrollChrome x:Name="Chrome"
                                                               Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="{TemplateBinding Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph}"
                                                               RenderMouseOver="{TemplateBinding IsMouseOver}"
                                                               RenderPressed="{TemplateBinding IsPressed}"
                                                               SnapsToDevicePixels="true" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="VerticalScrollBarPageButton"
               TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle"
                    Value="true" />
            <Setter Property="Background"
                    Value="Transparent" />
            <Setter Property="Focusable"
                    Value="false" />
            <Setter Property="IsTabStop"
                    Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Width="{TemplateBinding Width}"
                                   Height="{TemplateBinding Height}"
                                   Fill="{TemplateBinding Background}" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumb"
               TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle"
                    Value="true" />
            <Setter Property="IsTabStop"
                    Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Microsoft_Windows_Themes:ScrollChrome x:Name="Chrome"
                                                               Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="{TemplateBinding Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph}"
                                                               RenderMouseOver="{TemplateBinding IsMouseOver}"
                                                               RenderPressed="{TemplateBinding IsDragging}"
                                                               SnapsToDevicePixels="true" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="HorizontalScrollBarBackground"
                             StartPoint="0,0"
                             EndPoint="0,1">
            <GradientStop Offset="0"
                          Color="#E1E1E1" />
            <GradientStop Offset="0.20"
                          Color="#EDEDED" />
            <GradientStop Offset="0.80"
                          Color="#EDEDED" />
            <GradientStop Offset="1"
                          Color="#E3E3E3" />
        </LinearGradientBrush>
        <Style x:Key="HorizontalScrollBarPageButton"
               TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle"
                    Value="true" />
            <Setter Property="Background"
                    Value="Transparent" />
            <Setter Property="Focusable"
                    Value="false" />
            <Setter Property="IsTabStop"
                    Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Width="{TemplateBinding Width}"
                                   Height="{TemplateBinding Height}"
                                   Fill="{TemplateBinding Background}" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="localBar"
               TargetType="{x:Type ScrollBar}">
            <Setter Property="Background"
                    Value="{StaticResource VerticalScrollBarBackground}" />
            <Setter Property="Stylus.IsPressAndHoldEnabled"
                    Value="false" />
            <Setter Property="Stylus.IsFlicksEnabled"
                    Value="false" />
            <Setter Property="Foreground"
                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Width"
                    Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            <Setter Property="MinWidth"
                    Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="Bg"
                              Background="{TemplateBinding Background}"
                              SnapsToDevicePixels="true">
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                                <RowDefinition Height="0.00001*" />
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                            </Grid.RowDefinitions>
                            <RepeatButton Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="UpArrow"
                                          Command="{x:Static ScrollBar.LineUpCommand}"
                                          IsEnabled="{TemplateBinding IsMouseOver}"
                                          Style="{StaticResource ScrollBarButton}" />
                            <Track x:Name="PART_Track"
                                   Grid.Row="1"
                                   IsDirectionReversed="true"
                                   IsEnabled="{TemplateBinding IsMouseOver}">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}"
                                                  Style="{StaticResource VerticalScrollBarPageButton}" />
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}"
                                                  Style="{StaticResource VerticalScrollBarPageButton}" />
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="VerticalGripper"
                                           Style="{StaticResource ScrollBarThumb}" />
                                </Track.Thumb>
                            </Track>
                            <RepeatButton Grid.Row="2"
                                          Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="DownArrow"
                                          Command="{x:Static ScrollBar.LineDownCommand}"
                                          IsEnabled="{TemplateBinding IsMouseOver}"
                                          Style="{StaticResource ScrollBarButton}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled"
                                     Value="false">
                                <Setter TargetName="Bg"
                                        Property="Background"
                                        Value="{StaticResource ScrollBarDisabledBackground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Orientation"
                         Value="Horizontal">
                    <Setter Property="Width"
                            Value="Auto" />
                    <Setter Property="MinWidth"
                            Value="0" />
                    <Setter Property="Height"
                            Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                    <Setter Property="MinHeight"
                            Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                    <Setter Property="Background"
                            Value="{StaticResource HorizontalScrollBarBackground}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ScrollBar}">
                                <Grid x:Name="Bg"
                                      Background="{TemplateBinding Background}"
                                      SnapsToDevicePixels="true">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                        <ColumnDefinition Width="0.00001*" />
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                    </Grid.ColumnDefinitions>
                                    <RepeatButton Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="LeftArrow"
                                                  Command="{x:Static ScrollBar.LineLeftCommand}"
                                                  IsEnabled="{TemplateBinding IsMouseOver}"
                                                  Style="{StaticResource ScrollBarButton}" />
                                    <Track x:Name="PART_Track"
                                           Grid.Column="1"
                                           IsEnabled="{TemplateBinding IsMouseOver}">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}"
                                                          Style="{StaticResource HorizontalScrollBarPageButton}" />
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}"
                                                          Style="{StaticResource HorizontalScrollBarPageButton}" />
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="HorizontalGripper"
                                                   Style="{StaticResource ScrollBarThumb}" />
                                        </Track.Thumb>
                                    </Track>
                                    <RepeatButton Grid.Column="2"
                                                  Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="RightArrow"
                                                  Command="{x:Static ScrollBar.LineRightCommand}"
                                                  IsEnabled="{TemplateBinding IsMouseOver}"
                                                  Style="{StaticResource ScrollBarButton}" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled"
                                             Value="false">
                                        <Setter TargetName="Bg"
                                                Property="Background"
                                                Value="{StaticResource ScrollBarDisabledBackground}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <ControlTemplate x:Key="ScrollViewerControlTemplate1"
                         TargetType="{x:Type ScrollViewer}">
            <Grid x:Name="Grid"
                  Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Rectangle x:Name="Corner"
                           Grid.Row="1"
                           Grid.Column="1"
                           Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                        Grid.Row="0"
                                        Grid.Column="0"
                                        Margin="{TemplateBinding Padding}"
                                        CanContentScroll="{TemplateBinding CanContentScroll}"
                                        CanHorizontallyScroll="False"
                                        CanVerticallyScroll="False"
                                        Content="{TemplateBinding Content}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                <ScrollBar x:Name="PART_VerticalScrollBar"
                           Grid.Row="0"
                           Grid.Column="1"
                           AutomationProperties.AutomationId="VerticalScrollBar"
                           Cursor="Arrow"
                           Maximum="{TemplateBinding ScrollableHeight}"
                           Minimum="0"
                           ViewportSize="{TemplateBinding ViewportHeight}"
                           Visibility="Collapsed"
                           Value="{Binding Path=VerticalOffset,
                                           Mode=OneWay,
                                           RelativeSource={RelativeSource TemplatedParent}}" />
                <ScrollBar x:Name="PART_HorizontalScrollBar"
                           Grid.Row="1"
                           Grid.Column="0"
                           AutomationProperties.AutomationId="HorizontalScrollBar"
                           Cursor="Arrow"
                           Maximum="{TemplateBinding ScrollableWidth}"
                           Minimum="0"
                           Orientation="Horizontal"
                           ViewportSize="{TemplateBinding ViewportWidth}"
                           Visibility="Collapsed"
                           Value="{Binding Path=HorizontalOffset,
                                           Mode=OneWay,
                                           RelativeSource={RelativeSource TemplatedParent}}" />
                <ScrollBar x:Name="PART_AniVerticalScrollBar"
                           Grid.Column="1"
                           AutomationProperties.AutomationId="VerticalScrollBar"
                           Cursor="Arrow"
                           Maximum="{TemplateBinding ScrollableHeight}"
                           Minimum="0"
                           ViewportSize="{TemplateBinding ViewportHeight}"
                           Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                           Value="{Binding Path=VerticalOffset,
                                           Mode=OneWay,
                                           RelativeSource={RelativeSource TemplatedParent}}" />
                <ScrollBar x:Name="PART_AniHorizontalScrollBar"
                           Grid.Row="1"
                           AutomationProperties.AutomationId="HorizontalScrollBar"
                           Cursor="Arrow"
                           Maximum="{TemplateBinding ScrollableWidth}"
                           Minimum="0"
                           Orientation="Horizontal"
                           ViewportSize="{TemplateBinding ViewportWidth}"
                           Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                           Value="{Binding Path=HorizontalOffset,
                                           Mode=OneWay,
                                           RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
        </ControlTemplate>
        <!--  End Animated Listbox  -->

        <!--  MacOS Scroll Bars  -->
        <SolidColorBrush x:Key="ScrollThumbInactiveColor"
                         Color="Transparent" />
        <SolidColorBrush x:Key="ScrollThumbOverColor"
                         Color="LightGray" />
        <SolidColorBrush x:Key="ScrollThumbActiveColor"
                         Color="Gray" />
        <Style x:Key="ScrollBarTrackThumb"
               TargetType="{x:Type Thumb}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Grid x:Name="Grid">
                            <Rectangle Width="Auto"
                                       Height="Auto"
                                       HorizontalAlignment="Stretch"
                                       VerticalAlignment="Stretch"
                                       Fill="Transparent" />
                            <Border x:Name="CornerScrollBarRectangle"
                                    Width="Auto"
                                    Height="Auto"
                                    Margin="0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Background="{TemplateBinding Background}"
                                    CornerRadius="5" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Tag"
                                     Value="Horizontal">
                                <Setter TargetName="CornerScrollBarRectangle"
                                        Property="Width"
                                        Value="Auto" />
                                <Setter TargetName="CornerScrollBarRectangle"
                                        Property="Height"
                                        Value="7" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="AnimatedScrollBar"
               TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsFlicksEnabled"
                    Value="false" />
            <Setter Property="Foreground"
                    Value="#ADABAB" />
            <Setter Property="Background"
                    Value="Transparent" />
            <Setter Property="Width"
                    Value="10" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="GridRoot"
                              Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Track x:Name="PART_Track"
                                   Grid.Row="0"
                                   Focusable="False"
                                   IsDirectionReversed="true">
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb"
                                           Background="{TemplateBinding Foreground}"
                                           Style="{DynamicResource ScrollBarTrackThumb}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PageUp"
                                                  Command="ScrollBar.PageDownCommand"
                                                  Focusable="false"
                                                  Opacity="0" />
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PageDown"
                                                  Command="ScrollBar.PageUpCommand"
                                                  Focusable="false"
                                                  Opacity="0" />
                                </Track.DecreaseRepeatButton>
                            </Track>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger SourceName="Thumb"
                                     Property="IsMouseOver"
                                     Value="true">
                                <Setter TargetName="Thumb"
                                        Property="Background"
                                        Value="{StaticResource ScrollThumbOverColor}" />
                            </Trigger>
                            <Trigger SourceName="Thumb"
                                     Property="IsMouseOver"
                                     Value="False">
                                <Setter TargetName="Thumb"
                                        Property="Background"
                                        Value="{StaticResource ScrollThumbInactiveColor}" />
                            </Trigger>
                            <Trigger SourceName="Thumb"
                                     Property="IsDragging"
                                     Value="true">
                                <Setter TargetName="Thumb"
                                        Property="Background"
                                        Value="{DynamicResource ScrollThumbActiveColor}" />
                            </Trigger>

                            <Trigger Property="IsEnabled"
                                     Value="false">
                                <Setter TargetName="Thumb"
                                        Property="Visibility"
                                        Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="Orientation"
                                     Value="Horizontal">
                                <Setter TargetName="GridRoot"
                                        Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="PART_Track"
                                        Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Width"
                                        Value="Auto" />
                                <Setter Property="Height"
                                        Value="Auto" />
                                <Setter TargetName="Thumb"
                                        Property="Tag"
                                        Value="Horizontal" />
                                <Setter TargetName="PageDown"
                                        Property="Command"
                                        Value="ScrollBar.PageLeftCommand" />
                                <Setter TargetName="PageUp"
                                        Property="Command"
                                        Value="ScrollBar.PageRightCommand" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--  MacOS Scroll Bars End  -->

        <!--  Semi-Transparent Button  -->
        <Style x:Key="SemiTransparentButton"
               TargetType="Button">
            <Setter Property="OverridesDefaultStyle"
                    Value="True" />
            <Setter Property="Cursor"
                    Value="Hand" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Name="border"
                                BorderThickness="0"
                                BorderBrush="Black"
                                Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"
                                     Value="True">
                                <Setter Property="Opacity"
                                        Value="0.8" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--  Semi-Transparent Button End  -->



    </Application.Resources>
</Application>