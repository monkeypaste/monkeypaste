<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommonIgnoreLabel" xml:space="preserve">
    <value>忽略</value>
  </data>
  <data name="CommonIgnoreReaderHint" xml:space="preserve">
    <value>选中 {0} 格式后，将不会从剪贴板或拖放数据中读取格式。</value>
  </data>
  <data name="CommonIgnoreWriterHint" xml:space="preserve">
    <value>选中 {0} 格式后，不会将数据写入剪贴板或拖放数据。</value>
  </data>
  <data name="CommonReadLabel" xml:space="preserve">
    <value>读</value>
  </data>
  <data name="CommonWriteLabel" xml:space="preserve">
    <value>写</value>
  </data>
  <data name="PluginDescription" xml:space="preserve">
    <value>处理默认剪贴板格式</value>
  </data>
  <data name="PluginName" xml:space="preserve">
    <value>核心剪贴板处理程序</value>
  </data>
  <data name="PluginTags" xml:space="preserve">
    <value>核心、剪贴板、拖放、文本、Rtf、富文本、Html、Csv、图像、Png、Jpg、Jpeg、链接</value>
  </data>
  <data name="Html2RtfHint" xml:space="preserve">
    <value>当 rtf 尚不存在时，html 将转换为 rtf。</value>
  </data>
  <data name="Html2RtfLabel" xml:space="preserve">
    <value>转换为RTF</value>
  </data>
  <data name="IgnoredDirsHint" xml:space="preserve">
    <value>这些目录不会从剪贴板或拖放数据中读取。</value>
  </data>
  <data name="IgnoredDirsLabel" xml:space="preserve">
    <value>忽略的目录</value>
  </data>
  <data name="IgnoredFileExtLabel" xml:space="preserve">
    <value>忽略的文件扩展名</value>
  </data>
  <data name="IgnoredFileExtReaderHint" xml:space="preserve">
    <value>这些文件类型不会从剪贴板或拖放数据中读取。</value>
  </data>
  <data name="IgnoredFileExtWriterHint" xml:space="preserve">
    <value>这些文件类型不会写入剪贴板或拖放数据。</value>
  </data>
  <data name="ImgDoScaleHint" xml:space="preserve">
    <value>选中后，大于最大尺寸的图像将被缩放，同时保留纵横比。</value>
  </data>
  <data name="ImgDoScaleLabel" xml:space="preserve">
    <value>规模超大</value>
  </data>
  <data name="ImgExportTypeHint" xml:space="preserve">
    <value>粘贴或删除位图时，这将是默认文件类型</value>
  </data>
  <data name="ImgExportTypeLabel" xml:space="preserve">
    <value>默认导出类型</value>
  </data>
  <data name="ImgIgnoreTransparentImgHint" xml:space="preserve">
    <value>有时完全透明的图像会显示在剪贴板上，这令人困惑。</value>
  </data>
  <data name="ImgIgnoreTransparentImgLabel" xml:space="preserve">
    <value>忽略空图像</value>
  </data>
  <data name="ImgMaxHint" xml:space="preserve">
    <value>不幸的是，大图像（超过几 MB）可能会使拖放和整体性能有些缓慢。</value>
  </data>
  <data name="ImgMaxHLabel" xml:space="preserve">
    <value>最大高度</value>
  </data>
  <data name="ImgMaxWLabel" xml:space="preserve">
    <value>最大宽度</value>
  </data>
  <data name="MaxCharsHint" xml:space="preserve">
    <value>出于性能考虑，需要最大数量的字符</value>
  </data>
  <data name="MaxCharsLabel" xml:space="preserve">
    <value>最大字符数</value>
  </data>
  <data name="NtfEmptyImgText" xml:space="preserve">
    <value>格式“{0}”包含空数据或透明数据并被阻止</value>
  </data>
  <data name="NtfEmptyImgTitle" xml:space="preserve">
    <value>空数据被阻止</value>
  </data>
  <data name="NtfFormatIgnoredText" xml:space="preserve">
    <value>“{0}”格式被标记为“忽略”</value>
  </data>
  <data name="NtfFormatIgnoredTitle" xml:space="preserve">
    <value>格式被忽略</value>
  </data>
  <data name="NtfMaxSizeText" xml:space="preserve">
    <value>{0} 限制为 {1}，数据为 {2}</value>
  </data>
  <data name="NtfMaxSizeTitle" xml:space="preserve">
    <value>检测到的最大尺寸</value>
  </data>
  <data name="NtfReaderDetail" xml:space="preserve">
    <value>核心剪贴板阅读器</value>
  </data>
  <data name="NtfWriterDetail" xml:space="preserve">
    <value>核心剪贴板编写器</value>
  </data>
  <data name="Rtf2HtmlHint" xml:space="preserve">
    <value>当 html 尚不存在时，rtf 将转换为 html。</value>
  </data>
  <data name="Rtf2HtmlLabel" xml:space="preserve">
    <value>转换为 HTML</value>
  </data>
  <data name="UntitledLabel" xml:space="preserve">
    <value>无标题</value>
  </data>
</root>