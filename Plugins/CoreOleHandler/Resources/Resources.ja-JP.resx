<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommonIgnoreLabel" xml:space="preserve">
    <value>無視する</value>
  </data>
  <data name="CommonIgnoreReaderHint" xml:space="preserve">
    <value>チェックすると、{0} 形式はクリップボードまたはドラッグ アンド ドロップ データから読み取られません。</value>
  </data>
  <data name="CommonIgnoreWriterHint" xml:space="preserve">
    <value>チェックすると、{0} 形式はクリップボードまたはドラッグ アンド ドロップ データに書き込まれません。</value>
  </data>
  <data name="CommonReadLabel" xml:space="preserve">
    <value>読む</value>
  </data>
  <data name="CommonWriteLabel" xml:space="preserve">
    <value>書く</value>
  </data>
  <data name="PluginDescription" xml:space="preserve">
    <value>デフォルトのクリップボード形式を処理します</value>
  </data>
  <data name="PluginName" xml:space="preserve">
    <value>コアクリップボードハンドラ</value>
  </data>
  <data name="PluginTags" xml:space="preserve">
    <value>コア、クリップボード、ドラッグ アンド ドロップ、テキスト、RTF、リッチ テキスト、Html、CSV、画像、PNG、Jpg、Jpeg、リンク</value>
  </data>
  <data name="Html2RtfHint" xml:space="preserve">
    <value>rtf がまだ存在しない場合、html は rtf に変換されます。</value>
  </data>
  <data name="Html2RtfLabel" xml:space="preserve">
    <value>RTFに変換</value>
  </data>
  <data name="IgnoredDirsHint" xml:space="preserve">
    <value>これらのディレクトリは、クリップボードまたはドラッグ アンド ドロップ データから読み取られません。</value>
  </data>
  <data name="IgnoredDirsLabel" xml:space="preserve">
    <value>無視されるディレクトリ</value>
  </data>
  <data name="IgnoredFileExtLabel" xml:space="preserve">
    <value>無視されるファイル拡張子</value>
  </data>
  <data name="IgnoredFileExtReaderHint" xml:space="preserve">
    <value>これらのファイル タイプは、クリップボードまたはドラッグ アンド ドロップ データからは読み取られません。</value>
  </data>
  <data name="IgnoredFileExtWriterHint" xml:space="preserve">
    <value>これらのファイル タイプは、クリップボードやドラッグ アンド ドロップ データには書き込まれません。</value>
  </data>
  <data name="ImgDoScaleHint" xml:space="preserve">
    <value>チェックすると、最大寸法より大きい画像はアスペクト比を維持しながら拡大縮小されます。</value>
  </data>
  <data name="ImgDoScaleLabel" xml:space="preserve">
    <value>特大スケール</value>
  </data>
  <data name="ImgExportTypeHint" xml:space="preserve">
    <value>ビットマップをペーストまたはドロップする場合、これがデフォルトのファイルタイプになります。</value>
  </data>
  <data name="ImgExportTypeLabel" xml:space="preserve">
    <value>デフォルトのエクスポートタイプ</value>
  </data>
  <data name="ImgIgnoreTransparentImgHint" xml:space="preserve">
    <value>完全に透明な画像がクリップボードに表示されることがありますが、これは混乱を招きます。</value>
  </data>
  <data name="ImgIgnoreTransparentImgLabel" xml:space="preserve">
    <value>空の画像を無視する</value>
  </data>
  <data name="ImgMaxHint" xml:space="preserve">
    <value>残念ながら、大きな画像 (数 MB 以上) を使用すると、ドラッグ アンド ドロップが遅くなり、全体的なパフォーマンスが多少遅くなる可能性があります。</value>
  </data>
  <data name="ImgMaxHLabel" xml:space="preserve">
    <value>最大高さ</value>
  </data>
  <data name="ImgMaxWLabel" xml:space="preserve">
    <value>最大幅</value>
  </data>
  <data name="MaxCharsHint" xml:space="preserve">
    <value>パフォーマンス上の懸念から、最大文字数が必要です</value>
  </data>
  <data name="MaxCharsLabel" xml:space="preserve">
    <value>最大文字数</value>
  </data>
  <data name="NtfEmptyImgText" xml:space="preserve">
    <value>フォーマット '{0}' には空または透過的なデータが含まれていたため、ブロックされました</value>
  </data>
  <data name="NtfEmptyImgTitle" xml:space="preserve">
    <value>空のデータがブロックされました</value>
  </data>
  <data name="NtfFormatIgnoredText" xml:space="preserve">
    <value>「{0}」形式には「無視」のフラグが設定されています</value>
  </data>
  <data name="NtfFormatIgnoredTitle" xml:space="preserve">
    <value>フォーマットは無視されます</value>
  </data>
  <data name="NtfMaxSizeText" xml:space="preserve">
    <value>{0} の制限は {1}、データは {2} でした</value>
  </data>
  <data name="NtfMaxSizeTitle" xml:space="preserve">
    <value>検出された最大サイズ</value>
  </data>
  <data name="NtfReaderDetail" xml:space="preserve">
    <value>コアクリップボードリーダー</value>
  </data>
  <data name="NtfWriterDetail" xml:space="preserve">
    <value>コアクリップボードライター</value>
  </data>
  <data name="Rtf2HtmlHint" xml:space="preserve">
    <value>html がまだ存在しない場合、rtf は html に変換されます。</value>
  </data>
  <data name="Rtf2HtmlLabel" xml:space="preserve">
    <value>HTMLに変換</value>
  </data>
  <data name="UntitledLabel" xml:space="preserve">
    <value>無題</value>
  </data>
  <data name="CsvFormatLabel" xml:space="preserve">
    <value>CSV</value>
  </data>
  <data name="FilesFormatLabel" xml:space="preserve">
    <value>ファイル</value>
  </data>
  <data name="HtmlFormatLabel" xml:space="preserve">
    <value>HTML</value>
  </data>
  <data name="MimeTextFormatLabel" xml:space="preserve">
    <value>テキスト（マイム）</value>
  </data>
  <data name="MozUrlFormatLabel" xml:space="preserve">
    <value>URL (モズ)</value>
  </data>
  <data name="PngFormatLabel" xml:space="preserve">
    <value>画像(png)</value>
  </data>
  <data name="RtfFormatLabel" xml:space="preserve">
    <value>RTF</value>
  </data>
  <data name="TextFormatLabel" xml:space="preserve">
    <value>文章</value>
  </data>
  <data name="MimeHtmlFormatLabel" xml:space="preserve">
    <value>HTML (マイム)</value>
  </data>
</root>