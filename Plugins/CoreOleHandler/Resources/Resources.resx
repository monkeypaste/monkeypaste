<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommonIgnoreLabel" xml:space="preserve">
    <value>Ignore</value>
  </data>
  <data name="CommonIgnoreReaderHint" xml:space="preserve">
    <value>When checked {0} format will not be read from the clipboard or drag-and-drop data.</value>
    <comment>Clipboard Format Name</comment>
  </data>
  <data name="CommonIgnoreWriterHint" xml:space="preserve">
    <value>When checked {0} format will not be written to the clipboard or drag-and-drop data.</value>
    <comment>Clipboard Format Name</comment>
  </data>
  <data name="CommonReadLabel" xml:space="preserve">
    <value>Read</value>
  </data>
  <data name="CommonWriteLabel" xml:space="preserve">
    <value>Write</value>
  </data>
  <data name="CsvFormatLabel" xml:space="preserve">
    <value>Csv</value>
  </data>
  <data name="FilesFormatLabel" xml:space="preserve">
    <value>Files</value>
  </data>
  <data name="Html2RtfHint" xml:space="preserve">
    <value>When rtf is not already present, html will be converted to rtf. This may be useful between web browsers and/or word processing applications. (requires Rtf format to be enabled and is only for supported platforms)</value>
  </data>
  <data name="Html2RtfLabel" xml:space="preserve">
    <value>Convert To Rtf</value>
  </data>
  <data name="HtmlFormatLabel" xml:space="preserve">
    <value>Html</value>
  </data>
  <data name="IgnoredDirsHint" xml:space="preserve">
    <value>These directories will not be read from clipboard or drag-and-drop data.</value>
  </data>
  <data name="IgnoredDirsLabel" xml:space="preserve">
    <value>Ignored Directories</value>
  </data>
  <data name="IgnoredFileExtLabel" xml:space="preserve">
    <value>Ignored File Extensions</value>
  </data>
  <data name="IgnoredFileExtReaderHint" xml:space="preserve">
    <value>These file types will not be read from the clipboard or drag-and-drop data.</value>
  </data>
  <data name="IgnoredFileExtWriterHint" xml:space="preserve">
    <value>These file types will not be written to the clipboard or drag-and-drop data.</value>
  </data>
  <data name="ImgDoScaleHint" xml:space="preserve">
    <value>When checked, images larger than max dimension will be scaled while retaining aspect ratio. This does not affect the image on the clipboard.</value>
  </data>
  <data name="ImgDoScaleLabel" xml:space="preserve">
    <value>Scale Oversized</value>
  </data>
  <data name="ImgExportTypeHint" xml:space="preserve">
    <value>When pasting or dropping a bitmap this will be the default file type</value>
  </data>
  <data name="ImgExportTypeLabel" xml:space="preserve">
    <value>Default Export Type</value>
  </data>
  <data name="ImgIgnoreTransparentImgHint" xml:space="preserve">
    <value>Sometimes fully transparent images will show up on the clipboard, its confusing.</value>
  </data>
  <data name="ImgIgnoreTransparentImgLabel" xml:space="preserve">
    <value>Ignore Empty Images</value>
  </data>
  <data name="ImgMaxHint" xml:space="preserve">
    <value>Large images (more than a few MBs) can make drag-and-drop and overall performance somewhat sluggish unfortunately. Try to keep this value low.</value>
  </data>
  <data name="ImgMaxHLabel" xml:space="preserve">
    <value>Max Height</value>
  </data>
  <data name="ImgMaxWLabel" xml:space="preserve">
    <value>Max Width</value>
  </data>
  <data name="MaxCharsHint" xml:space="preserve">
    <value>For performance concerns, a maximum amount characters is needed</value>
  </data>
  <data name="MaxCharsLabel" xml:space="preserve">
    <value>Max Characters</value>
  </data>
  <data name="MimeHtmlFormatLabel" xml:space="preserve">
    <value>Html (mime)</value>
  </data>
  <data name="MimeTextFormatLabel" xml:space="preserve">
    <value>Text (mime)</value>
  </data>
  <data name="MozUrlFormatLabel" xml:space="preserve">
    <value>Url (moz)</value>
  </data>
  <data name="NtfEmptyImgText" xml:space="preserve">
    <value>Format '{0}' had empty or transparent data and was blocked</value>
    <comment>Clipboard Format</comment>
  </data>
  <data name="NtfEmptyImgTitle" xml:space="preserve">
    <value>Empty Data Blocked</value>
  </data>
  <data name="NtfFormatIgnoredText" xml:space="preserve">
    <value>'{0}' format is flagged as 'ignored'</value>
    <comment>Clipboard Format Name</comment>
  </data>
  <data name="NtfFormatIgnoredTitle" xml:space="preserve">
    <value>Format Ignored</value>
  </data>
  <data name="NtfMaxSizeText" xml:space="preserve">
    <value>{0} limit is {1} and data was {2}</value>
    <comment>Clipboard Format Name, Number, Number</comment>
  </data>
  <data name="NtfMaxSizeTitle" xml:space="preserve">
    <value>Max Size Detected</value>
  </data>
  <data name="NtfReaderDetail" xml:space="preserve">
    <value>Core Clipboard Reader</value>
  </data>
  <data name="NtfWriterDetail" xml:space="preserve">
    <value>Core Clipboard Writer</value>
  </data>
  <data name="PluginDescription" xml:space="preserve">
    <value>Handles default clipboard formats</value>
  </data>
  <data name="PluginName" xml:space="preserve">
    <value>Core Clipboard Handler</value>
  </data>
  <data name="PluginTags" xml:space="preserve">
    <value>Core, Clipboard, Drag and Drop, Text, Rtf, Rich Text, Html, Csv, Image, Png, Jpg, Jpeg, Link</value>
  </data>
  <data name="PngFormatLabel" xml:space="preserve">
    <value>Image (png)</value>
  </data>
  <data name="Rtf2HtmlHint" xml:space="preserve">
    <value>When html is not already present, rtf will be converted to html. This may be useful between web browsers and/or word processing applications. (requires Html format to be enabled and is only for supported platforms)</value>
  </data>
  <data name="Rtf2HtmlLabel" xml:space="preserve">
    <value>Convert To Html</value>
  </data>
  <data name="RtfFormatLabel" xml:space="preserve">
    <value>Rtf</value>
  </data>
  <data name="TextFormatLabel" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="TiffFormatLabel" xml:space="preserve">
    <value>Image (tiff)</value>
  </data>
  <data name="UntitledLabel" xml:space="preserve">
    <value>Untitled</value>
  </data>
</root>