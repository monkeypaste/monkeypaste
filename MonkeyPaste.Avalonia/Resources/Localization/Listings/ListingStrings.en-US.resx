<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BasicDescription" xml:space="preserve">
    <value>With this subscription you will receive:
- up to 1,000 clips of content 
- unlimited trash &amp; archive</value>
  </data>
  <data name="BasicMonthlyTitle" xml:space="preserve">
    <value>Basic - Monthly</value>
  </data>
  <data name="BasicYearlyTitle" xml:space="preserve">
    <value>Basic - Yearly</value>
  </data>
  <data name="StoreDescription" xml:space="preserve">
    <value>MonkeyPaste is a clipboard manager, automation and productivity tool like no other. Enhancing your clipboard into an enriched and organized part of your workflow,
featuring an intuitive and low-profile interface that supports text, files and images. Designed for flexibility, with an ever-growing community-driven libray of plugins.

It began as an experiment by a programmer wanting more than just copy and paste out of the clipboard. He wanted a simple command like Control+C that would 'add to' instead 
of 'replace' what was on the clipboard. And the experiment worked, eureka! The little tool was very handy. This entrigued the programmer with more ideas and more experiments, that 
now has become "MonkeyPaste". 

As the desktop is to your files, MonkeyPaste intends to be to your clipboard. Its a suite of tools carefully designed to seemlessly integrate and interoperate with 
any application or format of content. Control+C and Control+V are much more than just shortcuts. They are the ports of entry all applications share, carrying a 
wealth of value and meaning you deserve to have available at your fingertips. Not just thrown away after the next Control+C.

I am that programmer mentioned earlier and I want everyone to be able to find use out of MonkeyPaste. So it and all of its features are completely free to use. 
I also want you to feel comfortable using it. So I assure you, as being the only force behind its creation, that NONE of the (very) personal information that can arise on 
your clipboard is ever tracked or stored ANYWHERE beyond your own machine. Period.</value>
  </data>
  <data name="StoreFeatures" xml:space="preserve">
    <value>● Simple and friendly interface 
● Horizontal/vertical layouts, list/grid view and multi-monitor support
● Both light &amp; dark themes are completely dynamic, use any color you want

● Integrated help &amp; hints right in the interface
● Help manual, videos and forum to get you started all on the website (monkeypaste.com/docs)

● Optimized for performance and stressed tested with 1,000,000s of clips.
● Anytime search, just start typing
● Both simple &amp; advanced filtering on clips and their sources over dozens of fields
● Organize your clips in tag trees and create resusable filters

● Safe, secure and private local data storage (no data collection) always encrypted
● You can ignore clips from specific apps or websites
● Optional 2-factor password protection

● Custom global hot keys, routing and mouse-free navigation
● Extensive drag-and-drop support
● Custom mouse modes: right-click paste and left-click auto-copy 
● Append mode: Copying becomes 'add to' instead of 'replace' on the clipboard. Both text and files, fully customizable

● Sophisticated clip tracking, sources and usage
● Enhanced support for Firefox and Chromium-based browsers (Chrome, Edge, Brave)

● Works with rich text (tables, lists, links, etc.)
● Fully-featured clip editor with find/replace and highlighting
● Store your images in the secure database, ready to use as files anytime on-demand just drag-and-drop!

● Powerful text templating for quick, dynamic pasting from your snippet collection

● Trigger &amp; Action designer for custom automations and action chaining

● Simple to use and extend plugin system for both analyzing clips or read/write any format to your clipboard
● Built-in plugin browser with an ever-growing community-driven library of plugins 
● Automate everything with plugin presets, stash and use your any of your AI prompts or commands with ease

● More platforms and features coming soon! We're just gettings started 🎉</value>
  </data>
  <data name="TranslationWarning" xml:space="preserve">
    <value>Note! Screen shots are only examples. The app you install has been translated to this language.</value>
  </data>
  <data name="UnlimitedDescription" xml:space="preserve">
    <value>With this subscription you will receive:
- unlimited capacity
- device syncing (upon availability)</value>
  </data>
  <data name="UnlimitedMonthlyTitle" xml:space="preserve">
    <value>Unlimited - Monthly</value>
  </data>
  <data name="UnlimitedYearlyTitle" xml:space="preserve">
    <value>Unlimited - Yearly</value>
  </data>
</root>