<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GestureProfileGlobal" xml:space="preserve">
    <value>All interop shortcuts (those useful outside of MonkeyPaste) are enabled by default. Pressing Caps Lock (without any other key) will show or hide the interface at anytime (not currently supported on Linux)</value>
  </data>
  <data name="GestureProfileInternal" xml:space="preserve">
    <value>No global shortcuts are enabled by default. </value>
  </data>
  <data name="ProductDescription" xml:space="preserve">
    <value>The clipboard is a jungle. You need the prowess of a primate to navigate the terrain and tap its true potential.</value>
  </data>
  <data name="Test" xml:space="preserve">
    <value>This is a test &lt;b color="green"&gt;test&lt;/b&gt; &lt;em color="red"&gt;&lt;b&gt;test&lt;/b&lt;/em&gt; &lt;a color="pink" href="https://www.google.com/"&gt;test&lt;/a&gt;</value>
  </data>
  <data name="WelcomeAccountCaption" xml:space="preserve">
    <value>No features are limited by subscription, only storage capacity and can be changed at anytime.</value>
  </data>
  <data name="WelcomeAccountDescription1" xml:space="preserve">
    <value>Restore your existing account..</value>
  </data>
  <data name="WelcomeAccountDescription2" xml:space="preserve">
    <value>Content and archive is limited to {0} and {1} clips respectively. No syncing capabilities are enabled. More info here.</value>
  </data>
  <data name="WelcomeAccountDescription3" xml:space="preserve">
    <value>{0}{1}/{0}{2} (monthly/annually) {4} Content is limited to {3} clips with an unlimited archive and syncing across all devices. More info here.</value>
  </data>
  <data name="WelcomeAccountDescription4" xml:space="preserve">
    <value>{0}{1}/{0}{2} (monthly/annually) {3} Unrestricted, unlimited storage (optimized for efficiency with millions of items) with syncing across all devices. More info here.</value>
  </data>
  <data name="WelcomeAccountLabel1" xml:space="preserve">
    <value>Restore</value>
  </data>
  <data name="WelcomeAccountLabel2" xml:space="preserve">
    <value>Free</value>
  </data>
  <data name="WelcomeAccountLabel3" xml:space="preserve">
    <value>Standard</value>
  </data>
  <data name="WelcomeAccountLabel4" xml:space="preserve">
    <value>Unlimited</value>
  </data>
  <data name="WelcomeAccountTitle" xml:space="preserve">
    <value>Subscription</value>
  </data>
  <data name="WelcomeDbPasswordCaption" xml:space="preserve">
    <value>Your privacy is important and clipboard data can be very personal. Storage is always encrypted but you can set a password that will be required in case your device is stolen or someone else is using your device.</value>
  </data>
  <data name="WelcomeDbPasswordTitle" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="WelcomeDragToOpenCaption" xml:space="preserve">
    <value>When enabled, dragging from any application to the top of the screen will reveal MonkeyPaste to easily drop content into MonkeyPaste.</value>
  </data>
  <data name="WelcomeDragToOpenDescription1" xml:space="preserve">
    <value>Enabling the 'lock' in the top left of the main window will still allow dropping into MonkeyPaste.</value>
  </data>
  <data name="WelcomeDragToOpenDescription2" xml:space="preserve">
    <value>More window preferences are available from the 'Settings-&gt;Preferences-&gt;Window' menu.</value>
  </data>
  <data name="WelcomeDragToOpenGestureLabel" xml:space="preserve">
    <value>Drag Here</value>
  </data>
  <data name="WelcomeDragToOpenLabel1" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="WelcomeDragToOpenLabel2" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="WelcomeDragToOpenTitle" xml:space="preserve">
    <value>Drag-to-Open</value>
  </data>
  <data name="WelcomeGestureProfileCaption" xml:space="preserve">
    <value>Keyboard shortcuts can be reviewed or changed at anytime from the 'Settings-&gt;GestureProfile' menu.</value>
  </data>
  <data name="WelcomeGestureProfileDescription1" xml:space="preserve">
    <value>Internal</value>
  </data>
  <data name="WelcomeGestureProfileDescription2" xml:space="preserve">
    <value>MonkeyPaste's clipboard shortcuts will be available in all applications.</value>
  </data>
  <data name="WelcomeGestureProfileLabel1" xml:space="preserve">
    <value>Internal</value>
  </data>
  <data name="WelcomeGestureProfileLabel2" xml:space="preserve">
    <value>Global</value>
  </data>
  <data name="WelcomeGestureProfileTitle" xml:space="preserve">
    <value>Gesture Profile</value>
  </data>
  <data name="WelcomeGreetingCaption" xml:space="preserve">
    <value>Hey! Let's setup a few things to improve your overall experience with MonkeyPaste.</value>
  </data>
  <data name="WelcomeGreetingTitle" xml:space="preserve">
    <value>Welcome</value>
  </data>
  <data name="WelcomeLoginLoadCaption" xml:space="preserve">
    <value>To get the most use out of MonkeyPaste loading automatically when you log in is a good idea. But, that's entirely up to you.</value>
  </data>
  <data name="WelcomeLoginLoadDescription1" xml:space="preserve">
    <value>MonkeyPaste will only load when this user account is logged in, not for other users.</value>
  </data>
  <data name="WelcomeLoginLoadLabel1" xml:space="preserve">
    <value>Enable</value>
  </data>
  <data name="WelcomeLoginLoadTitle" xml:space="preserve">
    <value>Load On Login?</value>
  </data>
  <data name="WelcomeScrollToOpenCaption" xml:space="preserve">
    <value>When enabled, a scroll gesture at the top of the screen will reveal MonkeyPaste.</value>
  </data>
  <data name="WelcomeScrollToOpenDescription1" xml:space="preserve">
    <value>Left-clicking the taskbar icon will still open MonkeyPaste.</value>
  </data>
  <data name="WelcomeScrollToOpenDescription2" xml:space="preserve">
    <value>More window preferences are available from the 'Settings-&gt;Preferences-&gt;Window' menu.</value>
  </data>
  <data name="WelcomeScrollToOpenGestureCompleteLabel" xml:space="preserve">
    <value>Easy Right?</value>
  </data>
  <data name="WelcomeScrollToOpenGestureLabel" xml:space="preserve">
    <value>Scroll Here</value>
  </data>
  <data name="WelcomeScrollToOpenLabel1" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="WelcomeScrollToOpenLabel2" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="WelcomeScrollToOpenTitle" xml:space="preserve">
    <value>Scroll-to-Open</value>
  </data>
</root>