<local:MpAvUserControl xmlns="https://github.com/avaloniaui"
                       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                       xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                       xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                       xmlns:local="using:MonkeyPaste.Avalonia"
                       xmlns:pcl="using:MonkeyPaste"
                       mc:Ignorable="d"
                       d:DesignWidth="800"
                       d:DesignHeight="450"
                       x:Name="UserActionNotificationWindow"
                       x:DataType="local:MpAvUserActionNotificationViewModel"
                       x:CompileBindings="True"
                       x:Class="MonkeyPaste.Avalonia.MpAvUserActionNotificationView">
    <local:MpAvUserControl.Styles>
        <!--  USER ACTION BUTTONS  -->
        <!--<Style Selector="StackPanel#ActionButtonContainer :is(Button)">
            <Setter Property="HorizontalAlignment"
                    Value="Center" />
            <Setter Property="VerticalAlignment"
                    Value="Top" />
            <Setter Property="HorizontalContentAlignment"
                    Value="Center" />
            <Setter Property="VerticalContentAlignment"
                    Value="Center" />
            <Setter Property="CornerRadius"
                    Value="3" />
            <Setter Property="BorderThickness"
                    Value="2" />
            <Setter Property="Padding"
                    Value="5" />
            <Setter Property="Margin"
                    Value="5" />
            <Setter Property="Background"
                    Value="Silver" />
            <Setter Property="BorderBrush"
                    Value="{DynamicResource ThemeGrayAccent1Color}" />
            <Setter Property="Foreground"
                    Value="{DynamicResource ThemeInteractiveBgColor}" />
            <Setter Property="FontWeight"
                    Value="SemiBold" />
            <Setter Property="MinWidth"
                    Value="50" />
            <Setter Property="MaxWidth"
                    Value="100" />
        -->
        <!--<Style.Resources>
                <SolidColorBrush x:Key="ButtonBackground">Silver</SolidColorBrush>
                <SolidColorBrush x:Key="ButtonBackgroundPointerOver">LightSkyBlue</SolidColorBrush>
                <SolidColorBrush x:Key="ButtonBackgroundPressed">White</SolidColorBrush>

                <SolidColorBrush x:Key="ButtonForegroundPointerOver">Black</SolidColorBrush>
                <SolidColorBrush x:Key="ButtonForegroundPointerOver">Black</SolidColorBrush>
                <SolidColorBrush x:Key="ButtonForegroundPressed">Black</SolidColorBrush>
            </Style.Resources>-->
        <!--
        </Style>

        <Style Selector=":is(Window).notificationWindow Button:not(.optionsButton):pointerover /template/ ContentPresenter">
            <Setter Property="Background"
                    Value="{DynamicResource ThemeGrayAccent1Color}" />
        </Style>
        <Style Selector=":is(Window).userActionNotificationWindow Button:not(.optionsButton):pointerover">
            <Setter Property="BorderBrush"
                    Value="{DynamicResource HoverDefaultBorderBrush}" />
            <Setter Property="Background"
                    Value="{DynamicResource ThemeGrayAccent2Color}" />
        </Style>-->

        <!--  PARAM LISTBOXITEM  -->
        <Style Selector="ListBox#ExecuteParameterListBox > ListBoxItem"
               x:DataType="local:MpAvParameterViewModelBase">
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{x:Static BoolConverters.And}">
                        <Binding Path="IsExecuteParameter" />
                        <Binding Path="IsVisible" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style>
        <Style Selector="ListBox#ExecuteParameterListBox ListBoxItem">
            <Setter Property="Margin"
                    Value="0,2.5" />
            <Setter Property="Padding"
                    Value="0" />
            <Setter Property="HorizontalAlignment"
                    Value="Stretch" />
            <Setter Property="BorderBrush"
                    Value="{DynamicResource ThemeGrayAccent2Color}" />
        </Style>

        <Style Selector="ListBox#ExecuteParameterListBox ListBoxItem">
            <Setter Property="BorderThickness"
                    Value="0,0,0,1" />
        </Style>

        <Style Selector="ListBox#ExecuteParameterListBox ListBoxItem:nth-last-child()">
            <Setter Property="BorderThickness"
                    Value="0,0,0,0" />
        </Style>
    </local:MpAvUserControl.Styles>

    <Grid x:Name="NotificationWindowContainerGrid"
          RowDefinitions="*,Auto,Auto,Auto">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"
                              MaxWidth="100" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>


        <!--  MESSAGE BODY  -->
        <ContentControl Grid.Row="0"
                        Grid.Column="1"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        ScrollViewer.HorizontalScrollBarVisibility="Auto"
                        ScrollViewer.VerticalScrollBarVisibility="Auto"
                        Margin="5,5,5,10"
                        Content="{Binding}">
            <ContentControl.DataTemplates>
                <local:MpAvUserActionBodyTemplateSelector>
                    <DataTemplate x:Key="TextBodyTemplate"
                                  x:DataType="local:MpAvUserActionNotificationViewModel">
                        <ScrollViewer MaxWidth="250"
                                      MaxHeight="250">
                            <SelectableTextBlock FontSize="14"
                                                 HorizontalAlignment="Center"
                                                 VerticalAlignment="Top"
                                                 TextWrapping="WrapWithOverflow"
                                                 FontWeight="SemiBold"
                                                 Background="Transparent"
                                                 TextAlignment="Left"
                                                 Focusable="True"
                                                 Foreground="{DynamicResource ThemeWhiteBrush}"
                                                 Text="{Binding Body}" />
                        </ScrollViewer>
                    </DataTemplate>
                    <DataTemplate x:Key="ParameterCollectionTemplate"
                                  x:DataType="local:MpAvUserActionNotificationViewModel">
                        <Border DataContext="{Binding Body}"
                                MinWidth="250"
                                x:DataType="local:MpAvAnalyticItemPresetViewModel">
                            <ListBox x:Name="ExecuteParameterListBox"
                                     Grid.Row="1"
                                     Padding="0"
                                     HorizontalAlignment="Stretch"
                                     VerticalAlignment="Top"
                                     ScrollViewer.VerticalScrollBarVisibility="Disabled"
                                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                     BorderThickness="0"
                                     Background="Transparent"
                                     IsVisible="{Binding Items, Converter={x:Static local:MpAvIsNotNullZeroOrEmptyToBoolConverter.Instance}}"
                                     ItemsSource="{Binding Items}"
                                     SelectedItem="{Binding SelectedItem, Mode=TwoWay}">
                                <ListBox.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <VirtualizingStackPanel Orientation="Vertical"
                                                                HorizontalAlignment="Stretch"
                                                                VerticalAlignment="Stretch" />
                                    </ItemsPanelTemplate>
                                </ListBox.ItemsPanel>
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <local:MpAvPluginParameterItemView HorizontalAlignment="Stretch"
                                                                           Classes.invalid="{Binding !IsValid}" />
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </Border>
                    </DataTemplate>
                </local:MpAvUserActionBodyTemplateSelector>
            </ContentControl.DataTemplates>
        </ContentControl>

        <!--  TEXTBOX (Optional)  -->

        <Grid Grid.Row="1"
              Grid.Column="1"
              IsVisible="{Binding ShowTextBox}"
              RowDefinitions="Auto,Auto">
            <Border BorderThickness="2"
                    BorderBrush="{DynamicResource ThemeInteractiveBgColor}"
                    Background="{DynamicResource ThemeInteractiveBgColor}"
                    Margin="0,0,5,3"
                    CornerRadius="7"
                    Padding="3"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center">
                <TextBox Grid.Row="0"
                         Watermark="{Binding Detail}"
                         PasswordChar="{Binding PasswordChar}"
                         Classes.password="{Binding PasswordChar, Converter={x:Static local:MpAvIsNotNullZeroOrEmptyToBoolConverter.Instance}}"
                         Classes.revealPasswordButton="{Binding PasswordChar, Converter={x:Static local:MpAvIsNotNullZeroOrEmptyToBoolConverter.Instance}}"
                         TextAlignment="Left"
                         FontSize="14"
                         Padding="3"
                         BorderThickness="0"
                         Text="{Binding BoundInputText, Mode=TwoWay}" />
            </Border>
            <StackPanel Grid.Row="1"
                        Spacing="2"
                        Orientation="Horizontal"
                        IsVisible="{Binding CanRemember}">
                <Label Foreground="White"
                       VerticalAlignment="Center"
                       Content="{x:Static local:UiStrings.CommonRememberLabel}" />
                <CheckBox x:Name="RememberCheckbox"
                          IsChecked="{Binding RememberInputText, Mode=TwoWay}" />
            </StackPanel>
        </Grid>
        <!--  PROGRESS (Optional)  -->
        <Border Grid.Row="1"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                MinHeight="100"
                IsVisible="{Binding ShowProgressSpinner}"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center">

            <local:MpAvProgressSpinner x:Name="UserActionProgressSpinner"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       LabelBrush="{DynamicResource ThemeWhiteBrush}"
                                       Width="100"
                                       Height="100"
                                       Percent="{Binding PercentLoaded}" />
        </Border>

        <!--  BUTTONS ROW  -->

        <StackPanel x:Name="ActionButtonContainer"
                    Grid.Row="2"
                    Grid.Column="0"
                    Grid.ColumnSpan="2"
                    Margin="0"
                    Spacing="5"
                    Orientation="Horizontal"
                    HorizontalAlignment="Center">

            <!--  UPGRADE BUTTON  -->

            <Button Classes="defaultButton"
                    Padding="0"
                    IsDefault="True"
                    IsVisible="{Binding ShowUpgradeButton}"
                    Command="{Binding UpgradeCommand}">
                <Button.Resources>
                    <SolidColorBrush x:Key="ButtonBackground">Green</SolidColorBrush>
                    <SolidColorBrush x:Key="ButtonBackgroundPointerOver">Lime</SolidColorBrush>
                    <SolidColorBrush x:Key="ButtonBackgroundPressed">White</SolidColorBrush>

                    <SolidColorBrush x:Key="ButtonForegroundPointerOver">Black</SolidColorBrush>
                    <SolidColorBrush x:Key="ButtonForegroundPressed">Black</SolidColorBrush>
                </Button.Resources>

                <DockPanel>
                    <Image DockPanel.Dock="Left"
                           Width="15"
                           Height="15"
                           Margin="0,5"
                           VerticalAlignment="Center"
                           Source="{Binding Source={StaticResource BoltImage}, Converter={x:Static local:MpAvStringHexToBitmapTintConverter.Instance}, ConverterParameter=yellow1}" />
                    <TextBlock Text="{x:Static local:UiStrings.AccountUpgradeButtonText}"
                               VerticalAlignment="Center"
                               Foreground="White"
                               FontWeight="SemiBold" />
                </DockPanel>
            </Button>

            <!--  BUTTON SPACER  -->

            <Border x:Name="HiddenSeperator"
                    IsVisible="{Binding ShowUpgradeButton}"
                    Opacity="0"
                    Width="100" />

            <!--  LEARN MORE BUTTON  -->

            <Button Classes="defaultButton textOnlyButton"
                    Padding="0"
                    VerticalAlignment="Center"
                    IsVisible="{Binding ShowLearnMoreButton}"
                    Command="{Binding LearnMoreCommand}">
                <Button.Resources>
                    <SolidColorBrush x:Key="ButtonBackground">Blue</SolidColorBrush>
                    <SolidColorBrush x:Key="ButtonBackgroundPointerOver">LightSkyBlue</SolidColorBrush>
                    <SolidColorBrush x:Key="ButtonBackgroundPressed">White</SolidColorBrush>

                    <SolidColorBrush x:Key="ButtonForegroundPointerOver">Black</SolidColorBrush>
                    <SolidColorBrush x:Key="ButtonForegroundPressed">Black</SolidColorBrush>
                </Button.Resources>
                <TextBlock Text="{x:Static local:UiStrings.AccountLearnMoreButtonText}"
                           VerticalAlignment="Center"
                           Foreground="White"
                           FontWeight="SemiBold" />
            </Button>

            <!--  Ignore, Retry, Fix, Shutdown states  -->

            <Button Classes="defaultButton textOnlyButton"
                    Content="{x:Static local:UiStrings.UserActionIgnoreButtonText}"
                    IsVisible="{Binding ShowIgnoreButton}"
                    Command="{Binding IgnoreCommand}">
                <TextBlock Text="{x:Static local:UiStrings.UserActionIgnoreButtonText}" />
            </Button>
            <Button Classes="defaultButton textOnlyButton"
                    x:Name="RetryButton"
                    Content="{x:Static local:UiStrings.UserActionRetryButtonText}"
                    IsVisible="{Binding ShowRetryButton}"
                    Command="{Binding RetryCommand}">
                <TextBlock Text="{x:Static local:UiStrings.UserActionRetryButtonText}" />
            </Button>
            <Button Classes="defaultButton textOnlyButton"
                    x:Name="FixButton"
                    Content="{x:Static local:UiStrings.UserActionFixButtonText}"
                    IsVisible="{Binding ShowFixButton}"
                    VerticalAlignment="Top"
                    Command="{Binding FixWrapperCommand}">
                <TextBlock Text="{x:Static local:UiStrings.UserActionFixButtonText}" />
            </Button>
            <Button Classes="defaultButton textOnlyButton"
                    Content="{x:Static local:UiStrings.UserActionShutdownButtonText}"
                    IsVisible="{Binding ShowShutdownButton}"
                    Command="{Binding ShutdownCommand}">
                <TextBlock Text="{x:Static local:UiStrings.UserActionShutdownButtonText}" />
            </Button>

            <!--  Yes, No, Cancel or Ok, Cancel States  -->

            <Button Classes="defaultButton textOnlyButton"
                    Content="{x:Static local:UiStrings.CommonYesButtonText}"
                    IsDefault="{Binding ShowYesButton}"
                    Command="{Binding YesCommand}"
                    IsVisible="{Binding ShowYesButton}">
                <TextBlock Text="{x:Static local:UiStrings.CommonYesButtonText}" />
            </Button>
            <Button Classes="defaultButton textOnlyButton"
                    Content="{x:Static local:UiStrings.CommonNoButtonText}"
                    Command="{Binding NoCommand}"
                    IsVisible="{Binding ShowNoButton}">
                <TextBlock Text="{x:Static local:UiStrings.CommonNoButtonText}" />
            </Button>
            <!--  did  -->
            <Button Classes="defaultButton textOnlyButton"
                    IsDefault="{Binding ShowOkButton}"
                    Command="{Binding OkCommand}"
                    IsVisible="{Binding ShowOkButton}">
                <TextBlock Text="{x:Static local:UiStrings.CommonOkLabel}" />
            </Button>
            <Button Classes="defaultButton textOnlyButton"
                    Content="{x:Static local:UiStrings.UserActionSubmitButtonText}"
                    IsDefault="{Binding ShowSubmitButton}"
                    Command="{Binding SubmitCommand}"
                    IsVisible="{Binding ShowSubmitButton}">
                <TextBlock Text="{x:Static local:UiStrings.UserActionSubmitButtonText}" />
            </Button>
            <Button Classes="defaultButton textOnlyButton"
                    Content="{x:Static local:UiStrings.CommonCancelLabel}"
                    Command="{Binding CancelCommand}"
                    IsVisible="{Binding ShowCancelButton}">
                <TextBlock Text="{x:Static local:UiStrings.CommonCancelLabel}" />
            </Button>
        </StackPanel>
    </Grid>
</local:MpAvUserControl>
