<local:MpAvUserControl xmlns="https://github.com/avaloniaui"
                       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                       xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                       xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                       xmlns:local="using:MonkeyPaste.Avalonia"
                       xmlns:pcl="using:MonkeyPaste"
                       mc:Ignorable="d"
                       d:DesignWidth="800"
                       d:DesignHeight="450"
                       x:Name="UserActionNotificationWindow"
                       x:DataType="local:MpAvUserActionNotificationViewModel"
                       x:CompileBindings="True"
                       x:Class="MonkeyPaste.Avalonia.MpAvUserActionNotificationView">
    <local:MpAvUserControl.Styles>
        <!--  PROGRESS SPINNER  -->

        <!--  PARAM LISTBOXITEM  -->
        <Style Selector="ListBox#ExecuteParameterListBox > ListBoxItem"
               x:DataType="local:MpAvParameterViewModelBase">
            <Setter Property="IsVisible">
                <Setter.Value>
                    <MultiBinding Converter="{x:Static BoolConverters.And}">
                        <Binding Path="IsExecuteParameter" />
                        <Binding Path="IsVisible" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style>

        <Style Selector="Button.iconBtn">
            <Setter Property="MaxWidth"
                    Value="{StaticResource PosInf}" />
        </Style>
        <Style Selector="StackPanel.buttonsContainer Button">
            <Setter Property="CornerRadius"
                    Value="7" />
        </Style>
        <Style Selector="Border.innerBtnBorder">
            <Setter Property="CornerRadius"
                    Value="{Binding $parent[Button].CornerRadius}" />
            <Setter Property="Padding"
                    Value="10,5" />
        </Style>
        <Style Selector="Border.innerBtnBorder > StackPanel">
            <Setter Property="Orientation"
                    Value="Horizontal" />
            <Setter Property="Spacing"
                    Value="5" />
        </Style>
        <Style Selector="Border.innerBtnBorder Image">
            <Setter Property="Width"
                    Value="25" />
            <Setter Property="Height"
                    Value="25" />
            <Setter Property="VerticalAlignment"
                    Value="Center" />
        </Style>
        <Style Selector="Border.innerBtnBorder TextBlock">
            <Setter Property="Foreground"
                    Value="White" />
            <Setter Property="FontWeight"
                    Value="SemiBold" />
            <Setter Property="VerticalAlignment"
                    Value="Center" />
        </Style>
    </local:MpAvUserControl.Styles>
    <Border HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            MinHeight="130"
            BorderThickness="7"
            Padding="3,5"
            BorderBrush="{Binding BorderHexColor, Converter={x:Static local:MpAvStringHexToBrushConverter.Instance}}"
            Background="{Binding BackgroundHexColor, Converter={x:Static local:MpAvStringHexToBrushConverter.Instance}}"
            local:MpAvIsHoveringExtension.IsEnabled="True"
            local:MpAvIsHoveringExtension.IsHovering="{Binding IsHovering, Mode=TwoWay}">
        <Grid x:Name="NotificationWindowContainerGrid"
              RowDefinitions="Auto,Auto,Auto,Auto,0.6*">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"
                                  MaxWidth="100" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <!--  ICON  -->
            <Image Grid.Row="0"
                   Grid.RowSpan="2"
                   Grid.Column="0"
                   Width="64"
                   Height="64"
                   IsVisible="{Binding IconSourceObj, Converter={x:Static local:MpAvIsNotNullZeroOrEmptyToBoolConverter.Instance}}"
                   Source="{Binding IconSourceObj, Converter={x:Static local:MpAvStringHexToBitmapTintConverter.Instance}, ConverterParameter=ThemeInteractiveColor}"
                   Stretch="Fill"
                   HorizontalAlignment="Left"
                   VerticalAlignment="Top"
                   Margin="0,0,10,0" />

            <!--  TITLE  -->

            <!--<local:MpAvMarqueeTextBox Grid.Row="0"
                                      Grid.Column="1"
                                      AutoMarquee="False"
                                      EditOnFocus="False"
                                      MinWidth="{Binding #TitleUnderline.Bounds.Width}"
                                      MaxWidth="{Binding #TitleUnderline.Bounds.Width}"
                                      Width="{Binding #TitleUnderline.Bounds.Width}"
                                      MinHeight="30"
                                      FontSize="20"
                                      IsReadOnly="True"
                                      IsMarqueeEnabled="True"
                                      VerticalAlignment="Center"
                                      HorizontalAlignment="Left"
                                      TextAlignment="Left"
                                      HorizontalContentAlignment="Left"
                                      VerticalContentAlignment="Top"
                                      FontWeight="SemiBold"
                                      Text="{Binding Title}" />-->

            <TextBlock Grid.Row="0"
                       Grid.Column="1"
                       MaxWidth="{Binding #TitleUnderline.Bounds.Width}"
                       MinHeight="30"
                       FontSize="24"
                       VerticalAlignment="Top"
                       HorizontalAlignment="Left"
                       TextAlignment="Left"
                       Margin="0,0,5,0"
                       TextWrapping="WrapWithOverflow"
                       Effect="drop-shadow(0 0 3 black)"
                       FontWeight="SemiBold"
                       Foreground="White"
                       Text="{Binding Title}" />
            <!--  UNDERLINE  -->
            <Border x:Name="TitleUnderline"
                    Grid.Row="0"
                    Grid.Column="1"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Bottom"
                    BorderThickness="0"
                    Margin="0,0,5,0"
                    Background="{DynamicResource ThemeWhiteColor}"
                    Height="1" />


            <!--  MESSAGE BODY  -->
            <ContentControl Grid.Row="1"
                            Grid.Column="1"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            ScrollViewer.HorizontalScrollBarVisibility="Auto"
                            ScrollViewer.VerticalScrollBarVisibility="Auto"
                            Margin="5,5,5,10"
                            Content="{Binding}">
                <ContentControl.DataTemplates>
                    <local:MpAvUserActionBodyTemplateSelector>
                        <DataTemplate x:Key="TextBodyTemplate"
                                      x:DataType="local:MpAvUserActionNotificationViewModel">
                            <SelectableTextBlock FontSize="14"
                                                 HorizontalAlignment="Left"
                                                 VerticalAlignment="Top"
                                                 TextWrapping="Wrap"
                                                 FontWeight="SemiBold"
                                                 Background="Transparent"
                                                 Focusable="True"
                                                 Foreground="{Binding BackgroundHexColor, Converter={x:Static local:MpAvStringHexToContrastBrushConverter.Instance}}"
                                                 Text="{Binding Body}" />
                        </DataTemplate>
                        <DataTemplate x:Key="ParameterCollectionTemplate"
                                      x:DataType="local:MpAvUserActionNotificationViewModel">
                            <Border DataContext="{Binding Body}"
                                    MinWidth="250"
                                    x:DataType="local:MpAvAnalyticItemPresetViewModel">
                                <ListBox x:Name="ExecuteParameterListBox"
                                         Classes="paramHost"
                                         Grid.Row="1"
                                         Padding="0"
                                         HorizontalAlignment="Stretch"
                                         VerticalAlignment="Top"
                                         ScrollViewer.VerticalScrollBarVisibility="Disabled"
                                         ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                         BorderThickness="0"
                                         Background="Transparent"
                                         IsVisible="{Binding Items, Converter={x:Static local:MpAvIsNotNullZeroOrEmptyToBoolConverter.Instance}}"
                                         ItemsSource="{Binding Items}"
                                         SelectedItem="{Binding SelectedItem, Mode=TwoWay}">
                                    <ListBox.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Vertical"
                                                        HorizontalAlignment="Stretch"
                                                        VerticalAlignment="Stretch" />
                                        </ItemsPanelTemplate>
                                    </ListBox.ItemsPanel>
                                    <ListBox.ItemTemplate>
                                        <DataTemplate>
                                            <local:MpAvPluginParameterItemView HorizontalAlignment="Stretch"
                                                                               Classes.invalid="{Binding !IsValid}" />
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>
                            </Border>
                        </DataTemplate>
                    </local:MpAvUserActionBodyTemplateSelector>
                </ContentControl.DataTemplates>
            </ContentControl>

            <!--  TEXTBOX (Optional)  -->

            <Grid Grid.Row="2"
                  Grid.Column="1"
                  IsVisible="{Binding ShowTextBox}"
                  RowDefinitions="Auto,Auto">
                <Border BorderThickness="2"
                        BorderBrush="{DynamicResource ThemeInteractiveBgColor}"
                        Background="{DynamicResource ThemeInteractiveBgColor}"
                        Margin="0,0,5,3"
                        CornerRadius="7"
                        Padding="3"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center">
                    <TextBox Grid.Row="0"
                             Watermark="{Binding Detail}"
                             PasswordChar="{Binding PasswordChar}"
                             Classes.password="{Binding PasswordChar, Converter={x:Static local:MpAvIsNotNullZeroOrEmptyToBoolConverter.Instance}}"
                             Classes.revealPasswordButton="{Binding PasswordChar, Converter={x:Static local:MpAvIsNotNullZeroOrEmptyToBoolConverter.Instance}}"
                             TextAlignment="Left"
                             FontSize="14"
                             Padding="3"
                             BorderThickness="0"
                             Text="{Binding BoundInputText, Mode=TwoWay}" />
                </Border>
                <StackPanel Grid.Row="1"
                            Spacing="2"
                            Orientation="Horizontal"
                            IsVisible="{Binding CanRemember}">
                    <Label Foreground="White"
                           VerticalAlignment="Center"
                           Content="{x:Static local:UiStrings.CommonRememberLabel}" />
                    <CheckBox x:Name="RememberCheckbox"
                              IsChecked="{Binding RememberInputText, Mode=TwoWay}" />
                </StackPanel>
            </Grid>

            <!--  BUSY / PROGRESS (Optional)  -->
            <Border Grid.Row="2"
                    Grid.Column="0"
                    Grid.ColumnSpan="2"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center">
                <Border.IsVisible>
                    <MultiBinding Converter="{x:Static BoolConverters.Or}">
                        <Binding Path="ShowProgressSpinner" />
                        <Binding Path="ShowBusySpinner" />
                    </MultiBinding>
                </Border.IsVisible>

                <Grid>
                    <Border Margin="0,10,0,0"
                            Width="50"
                            Height="50"
                            IsVisible="{Binding ShowProgressSpinner}">
                        <!--  PROGRESS RING  -->
                        <local:MpAvProgressSpinnerView x:Name="UserActionProgressSpinner"
                                                       DataContext="{Binding ProgressIndicatorViewModel}" />

                    </Border>

                    <!--  BUSY SPINER  -->

                    <local:MpAvBusySpinnerView HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               IsVisible="{Binding ShowBusySpinner}"
                                               Width="70"
                                               Height="70" />
                </Grid>
            </Border>

            <!--  BUTTONS ROW  -->

            <StackPanel Classes="butttonsContainer"
                        Grid.Row="3"
                        Grid.Column="0"
                        Grid.ColumnSpan="2"
                        Margin="0,5,0,0"
                        Orientation="Horizontal"
                        HorizontalAlignment="Center">
                <!--  RATE APP  -->
                <Button Classes="iconBtn"
                        Padding="0"
                        IsDefault="True"
                        MaxWidth="{StaticResource PosInf}"
                        IsVisible="{Binding ShowRateButton}"
                        Command="{Binding RateAppCommand}">
                    <Border Classes="innerBtnBorder"
                            Background="Blue">
                        <StackPanel>
                            <Image Source="{Binding Source={StaticResource StarYellowImage}, Converter={x:Static local:MpAvStringHexToBitmapTintConverter.Instance}, ConverterParameter=yellow1}" />
                            <TextBlock Text="{x:Static local:UiStrings.SysTrayRateAppLabel}" />
                        </StackPanel>
                    </Border>
                </Button>
                <!--  UPGRADE  -->
                <Button Classes="iconBtn"
                        Padding="0"
                        IsDefault="True"
                        MaxWidth="{StaticResource PosInf}"
                        IsVisible="{Binding ShowUpgradeButton}"
                        Command="{Binding UpgradeCommand}">
                    <Border Classes="innerBtnBorder"
                            Background="Green">
                        <StackPanel>
                            <Image Source="{Binding Source={StaticResource BoltImage}, Converter={x:Static local:MpAvStringHexToBitmapTintConverter.Instance}, ConverterParameter=yellow1}" />
                            <TextBlock Text="{x:Static local:UiStrings.AccountUpgradeButtonText}" />
                        </StackPanel>
                    </Border>
                </Button>
                <Border x:Name="HiddenSeperator"
                        IsVisible="{Binding ShowUpgradeButton}"
                        Opacity="0"
                        Width="10" />
                <!--  LEARN MORE  -->
                <Button Classes="iconBtn"
                        Padding="0"
                        MaxWidth="{StaticResource PosInf}"
                        VerticalAlignment="Center"
                        IsVisible="{Binding ShowLearnMoreButton}"
                        Command="{Binding LearnMoreCommand}">
                    <Border Classes="innerBtnBorder"
                            Background="Blue">
                        <StackPanel>
                            <Image Source="{Binding Source={StaticResource QuestionMarkBwImage}, Converter={x:Static local:MpAvStringHexToBitmapTintConverter.Instance}, ConverterParameter=whitesmoke}" />
                            <TextBlock Text="{x:Static local:UiStrings.AccountLearnMoreButtonText}" />
                        </StackPanel>
                    </Border>
                </Button>

                <!--  UPDATE  -->
                <Button Classes="iconBtn"
                        Padding="0"
                        MaxWidth="{StaticResource PosInf}"
                        VerticalAlignment="Center"
                        IsVisible="{Binding ShowUpdateButton}"
                        Command="{Binding OkCommand}">
                    <Border Classes="innerBtnBorder"
                            Background="Blue">
                        <StackPanel>
                            <Image Source="{Binding Source={StaticResource DownCloudImage}, Converter={x:Static local:MpAvStringHexToBitmapTintConverter.Instance}, ConverterParameter=whitesmoke}" />
                            <TextBlock Text="{x:Static local:UiStrings.NtfUpdateButtonLabel}" />
                        </StackPanel>
                    </Border>
                </Button>
                <!--  Reset Shared, Reset Unshared, Reset All  -->
                <Button Content="{x:Static local:UiStrings.NtfResetPresetSharedButtonLabel}"
                        IsVisible="{Binding ShowResetPresetButtons}"
                        Command="{Binding ResetPresetCommand}"
                        CommandParameter="shared" />
                <Button Content="{x:Static local:UiStrings.NtfResetPresetUnsharedButtonLabel}"
                        IsVisible="{Binding ShowResetPresetButtons}"
                        Command="{Binding ResetPresetCommand}"
                        CommandParameter="unshared" />
                <Button Content="{x:Static local:UiStrings.NtfResetPresetAllButtonLabel}"
                        IsVisible="{Binding ShowResetPresetButtons}"
                        Command="{Binding ResetPresetCommand}"
                        CommandParameter="all" />
                <!--  RESTART BUTTON  -->
                <Button Content="{x:Static local:UiStrings.NtfUserActionRestartButtonLabel}"
                        IsVisible="{Binding ShowRestartButton}"
                        Command="{Binding RestartCommand}" />
                <!--  RESTART NOW, LATER  -->
                <Button Content="{x:Static local:UiStrings.NtfRestartNowButtonText}"
                        IsVisible="{Binding ShowRestartNowButton}"
                        Command="{Binding RestartCommand}" />
                <Button Content="{x:Static local:UiStrings.NtfRestartLaterButtonText}"
                        IsVisible="{Binding ShowLaterButton}"
                        Command="{Binding CancelCommand}" />
                <!--  Ignore, Retry, Fix, Shutdown states  -->
                <Button Content="{x:Static local:UiStrings.UserActionIgnoreButtonText}"
                        IsVisible="{Binding ShowIgnoreButton}"
                        Command="{Binding IgnoreCommand}" />
                <Button x:Name="RetryButton"
                        Content="{x:Static local:UiStrings.UserActionRetryButtonText}"
                        IsVisible="{Binding ShowRetryButton}"
                        Command="{Binding RetryCommand}" />
                <Button x:Name="FixButton"
                        Content="{x:Static local:UiStrings.UserActionFixButtonText}"
                        IsVisible="{Binding ShowFixButton}"
                        VerticalAlignment="Top"
                        Command="{Binding FixWrapperCommand}" />
                <Button Content="{x:Static local:UiStrings.UserActionShutdownButtonText}"
                        IsVisible="{Binding ShowShutdownButton}"
                        Command="{Binding ShutdownCommand}" />
                <!--  Yes, No, Cancel or Ok, Cancel States  -->
                <Button Content="{x:Static local:UiStrings.CommonYesButtonText}"
                        IsDefault="{Binding ShowYesButton}"
                        Command="{Binding YesCommand}"
                        IsVisible="{Binding ShowYesButton}" />
                <Button Content="{x:Static local:UiStrings.CommonNoButtonText}"
                        Command="{Binding NoCommand}"
                        IsVisible="{Binding ShowNoButton}" />
                <Button Content="{x:Static local:UiStrings.CommonOkLabel}"
                        IsDefault="{Binding ShowOkButton}"
                        Command="{Binding OkCommand}"
                        IsVisible="{Binding ShowOkButton}" />
                <Button Content="{x:Static local:UiStrings.UserActionSubmitButtonText}"
                        IsDefault="{Binding ShowSubmitButton}"
                        Command="{Binding SubmitCommand}"
                        IsVisible="{Binding ShowSubmitButton}" />
                <Button Content="{x:Static local:UiStrings.CommonCancelLabel}"
                        Command="{Binding CancelCommand}"
                        IsVisible="{Binding ShowCancelButton}" />
            </StackPanel>

            <!--  OPTIONS POPUP (Optional)  -->

            <local:MpAvOptionsButton Grid.Row="0"
                                     Grid.Column="1"
                                     RenderTransform="translateX(9px) translateY(-5px)"
                                     HorizontalAlignment="Right"
                                     IsVisible="{Binding ShowOptionsButton}"
                                     Command="{Binding ShowOptionsPopupCommand}"
                                     CommandParameter="{Binding $self}" />
        </Grid>
    </Border>
</local:MpAvUserControl>
