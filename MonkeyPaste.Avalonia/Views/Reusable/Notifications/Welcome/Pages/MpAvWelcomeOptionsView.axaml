<local:MpAvUserControl xmlns="https://github.com/avaloniaui"
                       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                       xmlns:sys="clr-namespace:System;assembly=mscorlib"
                       xmlns:av="clr-namespace:TheArtOfDev.HtmlRenderer.Avalonia;assembly=Avalonia.HtmlRenderer"
                       xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                       xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                       xmlns:local="using:MonkeyPaste.Avalonia"
                       x:DataType="local:MpAvWelcomeOptionGroupViewModel"
                       x:CompileBindings="True"
                       x:TypeArguments="local:MpAvWelcomeOptionGroupViewModel"
                       x:Class="MonkeyPaste.Avalonia.MpAvWelcomeOptionsView"
                       mc:Ignorable="d"
                       ClipToBounds="False"
                       d:DesignWidth="400"
                       d:DesignHeight="300">
    <local:MpAvUserControl.Resources>
    </local:MpAvUserControl.Resources>
    <local:MpAvUserControl.Styles>
        <!--  OPTION BUTTONS  -->

        <Style Selector="RadioButton.optButton">
            <Style.Resources>
                <SolidColorBrush x:Key="ToggleButtonBorderBrush" Color="{DynamicResource ThemeInteractiveBgColor}" />
                <SolidColorBrush x:Key="ToggleButtonBorderBrushPointerOver" Color="{DynamicResource ThemeAccent1Color}" />
                <SolidColorBrush x:Key="ToggleButtonBorderBrushPressed" Color="{DynamicResource ThemeAccent2Color}" />

                <SolidColorBrush x:Key="ToggleButtonBorderBrushChecked" Color="{DynamicResource ThemeInteractiveBgColor}" />
                <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPointerOver" Color="{DynamicResource ThemeAccent1Color}" />
                <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPressed" Color="{DynamicResource ThemeAccent2Color}" />

                <Thickness x:Key="ToggleButtonBorderThemeThickness">2.5</Thickness>
            </Style.Resources>
        </Style>
        <Style Selector="RadioButton.optButton.busy">
            <Setter Property="Cursor"
                    Value="Wait" />
        </Style>



        <Style Selector="RadioButton.optButton.busy">
            <Setter Property="Cursor"
                    Value="Wait" />
        </Style>

        <!--  UNLIM OPT  -->

        <Style Selector="Border.optContainer">
            <Setter Property="BorderBrush"
                    Value="Transparent" />
        </Style>
        <Style Selector="Border.unlim">
            <!--<Setter Property="local:MpAvBorderFollowExtension.IsBorderFollowEnabled"
                    Value="True" />-->
            <Setter Property="local:MpAvBorderFollowExtension.IsBorderTimerEnabled"
                    Value="True" />
            <Setter Property="BorderBrush"
                    Value="{StaticResource ThemedRainbowBrush}" />
        </Style>


        <Style Selector="Border.unlim:pointerover:not(.sel)">
            <Setter Property="BorderBrush"
                    Value="{StaticResource GoldBrush}" />
        </Style>

        <Style Selector="Border.unlim > RadioButton">
            <Setter Property="BorderThickness"
                    Value="0" />
        </Style>
        <Style Selector="Border.frozen.sel">
            <Setter Property="Background"
                    Value="SkyBlue" />
        </Style>
        <!--  CAPTION COLOR  -->
        <Style Selector="TransitioningContentControl#CaptionContainer TextBlock">
            <Setter Property="Foreground"
                    Value="White" />
        </Style>
        <Style Selector="TransitioningContentControl#CaptionContainer.checked TextBlock.description">
            <Setter Property="Foreground"
                    Value="RoyalBlue" />
        </Style>

        <!--  TRY GESTURE BUTTON  -->
        <Style Selector="Button.try"
               x:DataType="local:MpAvWelcomeNotificationViewModel">
            <Setter Property="MinWidth"
                    Value="150" />
            <Setter Property="BorderThickness"
                    Value="1" />
            <Setter Property="CornerRadius"
                    Value="10" />
            <Setter Property="BorderBrush"
                    Value="White" />
            <Setter Property="VerticalAlignment"
                    Value="Center" />
            <Setter Property="Padding"
                    Value="10,20" />
        </Style>
        <Style Selector="Border.try"
               x:DataType="local:MpAvWelcomeNotificationViewModel">
            <Setter Property="BorderThickness"
                    Value="2" />
            <Setter Property="CornerRadius"
                    Value="10" />
            <Setter Property="BorderBrush"
                    Value="Transparent" />
            <Setter Property="VerticalAlignment"
                    Value="Center" />
            <Setter Property="Padding"
                    Value="10,3" />
        </Style>

        <Style Selector="Border.try:pointerover"
               x:DataType="local:MpAvWelcomeNotificationViewModel">
            <Setter Property="BorderBrush"
                    Value="White" />
        </Style>

        <Style Selector=":is(Button).try TextBlock, Border.try TextBlock"
               x:DataType="local:MpAvWelcomeNotificationViewModel">
            <Setter Property="DockPanel.Dock"
                    Value="Bottom" />
            <Setter Property="FontSize"
                    Value="16" />
            <Setter Property="HorizontalAlignment"
                    Value="Stretch" />
            <Setter Property="VerticalAlignment"
                    Value="Center" />
            <Setter Property="TextAlignment"
                    Value="Center" />
        </Style>

        <Style Selector=":is(Button).try Image, Border.try Image"
               x:DataType="local:MpAvWelcomeNotificationViewModel">
            <Setter Property="Width"
                    Value="30" />
            <Setter Property="Height"
                    Value="30" />
            <Setter Property="Margin"
                    Value="10" />
            <Setter Property="HorizontalAlignment"
                    Value="Center" />
            <Setter Property="VerticalAlignment"
                    Value="Center" />
        </Style>

        <Style Selector=":is(Button).try Image"
               x:DataType="local:MpAvWelcomeNotificationViewModel">
            <Setter Property="Source"
                    Value="{Binding Source={StaticResource BellImage}, Converter={x:Static local:MpAvIconSourceObjToBitmapConverter.Instance}}" />
        </Style>

        <!--  SPLASH IMG  -->

        <Style Selector="Image.splash">
            <Setter Property="HorizontalAlignment"
                    Value="Center" />
            <Setter Property="VerticalAlignment"
                    Value="Center" />
            <Setter Property="Stretch"
                    Value="Uniform" />
        </Style>

        <Style Selector="Image.splash.translation">
            <Setter Property="Width"
                    Value="80" />
            <Setter Property="Height"
                    Value="55" />
            <Setter Property="Margin"
                    Value="0,0,0,20" />
            <Setter Property="RenderTransform"
                    Value="scale(50.0)" />
            <Setter Property="Effect"
                    Value="drop-shadow(0 0 11 white)" />
        </Style>
        <Style Selector="Image.splash.greeting">
            <Setter Property="Width"
                    Value="200" />
            <Setter Property="Height"
                    Value="200" />
            <Setter Property="Margin"
                    Value="0,0,0,20" />
            <Setter Property="Effect"
                    Value="drop-shadow(0 0 25 black)" />
        </Style>
        <Style Selector="Image.splash.dbpassword">
            <Setter Property="Width"
                    Value="100" />
            <Setter Property="Height"
                    Value="100" />
            <Setter Property="Margin"
                    Value="50,20,50,20" />
            <Setter Property="Effect"
                    Value="drop-shadow(0 0 20 black)" />
        </Style>

        <!--  BADGE  -->
        <Style Selector="Border.badge">
            <Setter Property="IsVisible"
                    Value="False" />
        </Style>
        <Style Selector="Border.badge.trial:not(.active)">
            <Setter Property="IsVisible"
                    Value="True" />
            <Setter Property="Background"
                    Value="Crimson" />
        </Style>
        <Style Selector="Border.badge.trial:not(.active) TextBlock"
               x:DataType="local:MpAvWelcomeOptionItemViewModel">
            <Setter Property="Text"
                    Value="{Binding LabelText2}" />
        </Style>

        <Style Selector="Border.badge.active">
            <Setter Property="IsVisible"
                    Value="True" />
            <Setter Property="Background"
                    Value="Blue" />
        </Style>
        <Style Selector="Border.badge.active TextBlock"
               x:DataType="local:MpAvWelcomeOptionItemViewModel">
            <Setter Property="Text"
                    Value="{Binding LabelText3}" />
        </Style>
    </local:MpAvUserControl.Styles>
    <!--  outer spacing was 20  -->
    <Grid RowDefinitions="100,Auto,Auto,Auto,Auto,Auto"
          HorizontalAlignment="Stretch"
          VerticalAlignment="Stretch">

        <!--  TITLE HEADER  -->

        <TextBlock Grid.Row="0"
                   Loaded="Title_Loaded"
                   ClipToBounds="False"
                   Effect="drop-shadow(0 0 7 white)"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   TextAlignment="Center"
                   FontSize="60"
                   Foreground="DimGray"
                   Text="{Binding Title}" />

        <!--  SPLASH IMAGE  -->

        <Image Grid.Row="1"
               Classes="splash fadeIn"
               Classes.greeting="{Binding WelcomePageType, ConverterParameter=Greeting, Converter={x:Static local:MpAvEnumToBoolConverter.Instance}}"
               Classes.dbpassword="{Binding WelcomePageType, ConverterParameter=DbPassword, Converter={x:Static local:MpAvEnumToBoolConverter.Instance}}"
               Classes.translation="{Binding WelcomePageType, ConverterParameter=Translation, Converter={x:Static local:MpAvEnumToBoolConverter.Instance}}"
               Source="{Binding SplashIconSourceObj, Converter={x:Static local:MpAvIconSourceObjToBitmapConverter.Instance}}"
               IsVisible="{Binding SplashIconSourceObj, Converter={x:Static local:MpAvIsNotNullZeroOrEmptyToBoolConverter.Instance}}" />

        <!--  CAPTION  -->
        <TextBlock Grid.Row="2"
                   Classes="description"
                   Text="{Binding Caption}" />

        <!--  ACCT MONTLY TOGGLE  -->
        <ToggleSwitch x:Name="MonthlyToggleButton"
                      Grid.Row="3"
                      DataContext="{x:Static local:MpAvWelcomeNotificationViewModel.Instance}"
                      x:DataType="local:MpAvWelcomeNotificationViewModel"
                      Classes="defaultButton"
                      Foreground="Black"
                      FontSize="16"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      IsEnabled="{Binding IsAccountMonthToggleEnabled}"
                      IsVisible="{Binding IsAccountOptSelected}"
                      IsChecked="{Binding IsAccountMonthlyChecked, Mode=TwoWay}"
                      FontWeight="SemiBold"
                      OnContent="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.AccountMonthlyLabel}"
                      OffContent="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.AccountYearlyLabel}" />

        <!--  OPTION BUTTONS  -->

        <Grid Grid.Row="4"
              IsVisible="{Binding !IsVisible, ElementName=PasswordContainer}"
              ColumnDefinitions="Auto,Auto,Auto"
              HorizontalAlignment="Center"
              VerticalAlignment="Center">

            <!--  OPTION BUTTONS  -->
            <ItemsControl ItemsSource="{Binding Items}"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel ClipToBounds="False"
                                    Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Grid IsVisible="{Binding IsOptionVisible, Mode=OneWay}">
                            <!--  OPTION BUTTON  -->

                            <Border local:MpAvIsHoveringExtension.IsEnabled="{Binding IsEnabled}"
                                    local:MpAvIsHoveringExtension.IsHovering="{Binding IsHovering, Mode=TwoWay}"
                                    Classes="rejectWindowMove optContainer"
                                    Classes.unlim="{Binding IsUnlimitedAccountItem}"
                                    Classes.sel="{Binding IsChecked}"
                                    Classes.frozem="{Binding !IsEnabled}"
                                    IsHitTestVisible="{Binding IsEnabled}"
                                    Background="{StaticResource HitTestableTransparent}"
                                    BorderThickness="2.5"
                                    CornerRadius="7"
                                    Margin="15">
                                <RadioButton Classes="defaultButton optButton effectTrans"
                                             Classes.busy="{Binding IsBusy}"
                                             Theme="{StaticResource SwitchlessRadioButton}"
                                             IsEnabled="{Binding IsEnabled}"
                                             Padding="15"
                                             Width="200"
                                             Height="230"
                                             CornerRadius="7"
                                             HorizontalAlignment="Stretch"
                                             VerticalAlignment="Stretch"
                                             HorizontalContentAlignment="Center"
                                             VerticalContentAlignment="Center"
                                             Command="{Binding CheckOptionCommand}"
                                             IsChecked="{Binding IsChecked, Mode=OneWay}">
                                    <DockPanel HorizontalAlignment="Stretch"
                                               VerticalAlignment="Stretch">
                                        <TextBlock DockPanel.Dock="Bottom"
                                                   HorizontalAlignment="Stretch"
                                                   VerticalAlignment="Bottom"
                                                   TextAlignment="Center"
                                                   FontSize="20"
                                                   Text="{Binding LabelText}" />
                                        <Image Width="160"
                                               Height="160"
                                               Margin="0,0,0,10"
                                               Stretch="UniformToFill"
                                               Source="{Binding IconSourceObj, Converter={x:Static local:MpAvStringHexToBitmapTintConverter.Instance}}" />
                                    </DockPanel>
                                </RadioButton>
                            </Border>


                            <!--  TRIAL/ACTIVE BADGE  -->

                            <Border x:Name="FreeTrialOuterContainer"
                                    Classes="badge rejectWindowMove"
                                    Classes.trial="{Binding LabelText2, Converter={x:Static local:MpAvIsNotNullZeroOrEmptyToBoolConverter.Instance}}"
                                    Classes.active="{Binding LabelText3, Converter={x:Static local:MpAvIsNotNullZeroOrEmptyToBoolConverter.Instance}}"
                                    Margin="0,0,0,0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Top"
                                    CornerRadius="7">
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <!--<TranslateTransform X="0" Y="-50" />-->
                                        <!--<RotateTransform Angle="45" />-->
                                    </TransformGroup>
                                </Border.RenderTransform>
                                <Border BorderBrush="White"
                                        CornerRadius="{Binding $parent.CornerRadius}"
                                        BorderThickness="2"
                                        Margin="3"
                                        Padding="7,5">
                                    <TextBlock FontWeight="SemiBold"
                                               FontSize="14"
                                               Foreground="WhiteSmoke"
                                               VerticalAlignment="Center"
                                               TextAlignment="Center"
                                               TextWrapping="NoWrap" />
                                </Border>
                            </Border>
                        </Grid>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <!--  TRY GESTURE BUTTON  -->
            <ToggleButton Grid.Column="1"
                          Margin="50,0,0,0"
                          IsVisible="{Binding IsGestureGroup}"
                          HorizontalAlignment="Right"
                          VerticalAlignment="Center"
                          IsChecked="{Binding IsGestureDemoOpen, Mode=OneWay, Source={x:Static local:MpAvWelcomeNotificationViewModel.Instance}}"
                          Command="{Binding ToggleGestureDemoCommand, Source={x:Static local:MpAvWelcomeNotificationViewModel.Instance}}"
                          Classes="try">
                <DockPanel>
                    <TextBlock Text="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.WelcomeScrollToOpenTryButtonLabel}" />
                    <Image />
                </DockPanel>
            </ToggleButton>

            <!--  DRAG-TO-OPEN SOURCE  -->
            <Border Grid.Column="2"
                    Margin="50,0,0,0"
                    Classes="try rejectWindowMove">
                <Border.IsVisible>
                    <MultiBinding Converter="{x:Static BoolConverters.And}">
                        <Binding Path="IsGestureGroup" />
                        <Binding Path="IsGestureDemoOpen"
                                 Source="{x:Static local:MpAvWelcomeNotificationViewModel.Instance}" />
                        <Binding Path="WelcomePageType"
                                 ConverterParameter="DragToOpen"
                                 Converter="{x:Static local:MpAvEnumToBoolConverter.Instance}" />
                    </MultiBinding>
                </Border.IsVisible>
                <DockPanel>
                    <TextBlock Text="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.WelcomeDragToOpenDragSourceLabel}" />
                    <Image x:Name="DragImage"
                           PointerPressed="DragImage_PointerPressed"
                           Classes="shake"
                           Source="{Binding Source={StaticResource BananaImage}, Converter={x:Static local:MpAvIconSourceObjToBitmapConverter.Instance}}">
                        <Image.RenderTransform>
                            <RotateTransform />
                        </Image.RenderTransform>
                    </Image>
                </DockPanel>
            </Border>
        </Grid>

        <!--  PASSWORD BOX  -->
        <Border x:Name="PasswordContainer"
                Grid.Row="4"
                DataContext="{x:Static local:MpAvWelcomeNotificationViewModel.Instance}"
                x:DataType="local:MpAvWelcomeNotificationViewModel"
                IsVisible="{Binding CurPageType, ConverterParameter=DbPassword, Converter={x:Static local:MpAvEnumToBoolConverter.Instance}}">
            <local:MpAvSetPasswordView Grid.Row="3"
                                       ShowDialogButtons="False"
                                       RememberPassword="{Binding RememberDbPassword}"
                                       AutoFilledPassword="{Binding AutoFillPassword}"
                                       ConfirmedPassword="{Binding DbPassword}"
                                       IsPasswordValid="{Binding IsDbPasswordValid}" />
        </Border>

        <!--  OPTION CAPTION  -->

        <TransitioningContentControl x:Name="CaptionContainer"
                                     Grid.Row="5"
                                     DockPanel.Dock="Bottom"
                                     HorizontalAlignment="Center"
                                     VerticalAlignment="Top"
                                     ClipToBounds="False"
                                     MinHeight="100"
                                     Classes.checked="{Binding IsPrimaryChecked, Source={x:Static local:MpAvWelcomeNotificationViewModel.Instance}}"
                                     Content="{Binding PrimaryItem, Source={x:Static local:MpAvWelcomeNotificationViewModel.Instance}}">
            <TransitioningContentControl.PageTransition>
                <CrossFade Duration="0:00:00.500" />
            </TransitioningContentControl.PageTransition>
            <TransitioningContentControl.ContentTemplate>
                <DataTemplate x:DataType="local:MpAvWelcomeOptionItemViewModel">
                    <StackPanel>
                        <TextBlock Classes="description"
                                   Text="{Binding DescriptionText}" />
                        <TextBlock Classes="description"
                                   IsVisible="{Binding DescriptionText2, Converter={x:Static local:MpAvIsNotNullZeroOrEmptyToBoolConverter.Instance}}"
                                   Text="{Binding DescriptionText2}"
                                   Foreground="Green"
                                   FontWeight="SemiBold" />
                    </StackPanel>
                </DataTemplate>
            </TransitioningContentControl.ContentTemplate>
        </TransitioningContentControl>
    </Grid>

</local:MpAvUserControl>
