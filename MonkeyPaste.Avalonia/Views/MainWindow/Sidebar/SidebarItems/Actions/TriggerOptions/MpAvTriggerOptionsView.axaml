<local:MpAvUserControl x:Class="MonkeyPaste.Avalonia.MpAvTriggerOptionsView"
                       xmlns="https://github.com/avaloniaui"
                       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                       xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                       xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                       xmlns:paz="using:Avalonia.Controls.PanAndZoom"
                       xmlns:sys="clr-namespace:System;assembly=mscorlib"
                       xmlns:local="using:MonkeyPaste.Avalonia"
                       x:CompileBindings="True"
                       x:TypeArguments="local:MpAvTriggerCollectionViewModel"
                       x:DataType="local:MpAvTriggerCollectionViewModel"
                       mc:Ignorable="d">
    <local:MpAvUserControl.Styles>

        <Style Selector=":is(Button)">
            <!--<Setter Property="Margin"
                    Value="5,2" />-->
            <Setter Property="HorizontalAlignment"
                    Value="Center" />
            <Setter Property="HorizontalContentAlignment"
                    Value="Center" />
            <Setter Property="Padding"
                    Value="5" />
            <Setter Property="FontSize"
                    Value="12" />
            <Setter Property="FontWeight"
                    Value="Medium" />
            <Setter Property="MinWidth"
                    Value="75" />
            <Setter Property="Cursor"
                    Value="Hand" />
        </Style>

        <Style Selector=":is(Button) TextBlock">
            <Setter Property="ClipToBounds"
                    Value="False" />
        </Style>
        <Style Selector="Border.splitter">
            <Setter Property="Width"
                    Value="1" />
            <Setter Property="VerticalAlignment"
                    Value="Stretch" />
            <Setter Property="Background"
                    Value="Silver" />
            <Setter Property="Margin"
                    Value="1,0" />
        </Style>

        <Style Selector=":is(Button) /template/ ContentPresenter">
            <Setter Property="Foreground"
                    Value="{Binding $self.Background, Converter={x:Static local:MpAvColorToContrastColorConverter.Instance}}" />
        </Style>

        <!--  ENABLE  -->
        <Style Selector=":is(Button)#EnableTriggerToggleButton:checked /template/ ContentPresenter">
            <!--<Setter Property="Background"
                    Value="{DynamicResource ThemeAccent3Color}" />-->
            <Setter Property="Content">
                <Setter.Value>
                    <Template>
                        <DockPanel>
                            <Image DockPanel.Dock="Left"
                                   Source="{Binding Source={StaticResource PauseImage}, Converter={x:Static local:MpAvStringHexToBitmapTintConverter.Instance}, ConverterParameter=ThemeInteractiveColor}" />
                            <TextBlock Text="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.TriggerPauseButtonLabel}" />
                        </DockPanel>
                    </Template>
                </Setter.Value>
            </Setter>
        </Style>
        <Style Selector=":is(Button)#EnableTriggerToggleButton:unchecked /template/ ContentPresenter">
            <!--<Setter Property="Background"
                    Value="{DynamicResource ThemeAccent2Color}" />-->
            <Setter Property="Content">
                <Setter.Value>
                    <Template>
                        <DockPanel>
                            <Image DockPanel.Dock="Left"
                                   Source="{Binding Source={StaticResource PlayImage}, Converter={x:Static local:MpAvStringHexToBitmapTintConverter.Instance}, ConverterParameter=ThemeInteractiveColor}" />
                            <TextBlock Text="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.TriggerResumeButtonLabel}" />
                        </DockPanel>
                    </Template>
                </Setter.Value>
            </Setter>
        </Style>

        <Style Selector=":is(Button)#EnableTriggerToggleButton[IsEnabled=false] /template/ ContentPresenter">
            <!--<Setter Property="Background"
                    Value="{DynamicResource ThemeAccent1Color}" />-->
            <Setter Property="Content"
                    Value="OOPSY" />
        </Style>

        <!--  DUPLICATE  -->

        <Style Selector="Button#DuplicateTriggerButton">
            <Setter Property="Background"
                    Value="{DynamicResource ThemeAccent5Color}" />
        </Style>
        <Style Selector="Button#DuplicateTriggerButton:pointerover">
            <Setter Property="Background"
                    Value="{DynamicResource ThemeAccent5BgColor}" />
        </Style>

        <Style Selector="Button#DuplicateTriggerButton /template/ ContentPresenter">
            <Setter Property="Background"
                    Value="{DynamicResource ThemeAccent5Color}" />
        </Style>
        <Style Selector="Button#DuplicateTriggerButton:pointerover /template/ ContentPresenter">
            <Setter Property="Background"
                    Value="{DynamicResource ThemeAccent5BgColor}" />
        </Style>

        <!--  DELETE  -->

        <Style Selector="Button#DeleteTriggerButton">
            <Setter Property="Background"
                    Value="{DynamicResource ThemeAccent2Color}" />
        </Style>
        <Style Selector="Button#DeleteTriggerButton:pointerover">
            <Setter Property="Background"
                    Value="{DynamicResource ThemeAccent2BgColor}" />
        </Style>

        <Style Selector="Button#DeleteTriggerButton /template/ ContentPresenter">
            <Setter Property="Background"
                    Value="{DynamicResource ThemeAccent2Color}" />
        </Style>
        <Style Selector="Button#DeleteTriggerButton:pointerover /template/ ContentPresenter">
            <Setter Property="Background"
                    Value="{DynamicResource ThemeAccent2BgColor}" />
        </Style>

        <Style Selector="Button#DeleteTriggerButton[IsEnabled=false]">
            <Setter Property="local:MpAvShowDisabledTooltipExtension.ShowOnDisabled"
                    Value="True" />
            <Setter Property="ToolTip.Tip">
                <Setter.Value>
                    <Template>
                        <local:MpAvToolTipView Classes="warning"
                                               ToolTipText="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.CommonReadOnlyElmDisabledToolTip}" />
                    </Template>
                </Setter.Value>
            </Setter>
        </Style>

    </local:MpAvUserControl.Styles>
    <Grid ColumnDefinitions="85,Auto,85,Auto,85"
          x:DataType="local:MpAvTriggerActionViewModelBase"
          DataContext="{Binding SelectedTrigger}"
          HorizontalAlignment="Center"
          VerticalAlignment="Stretch">

        <!--  ENABLED TOGGLE  -->
        <ToggleButton x:Name="EnableTriggerToggleButton"
                      Grid.Column="0"
                      Classes="defaultButton contrastFg"
                      Foreground="Black"
                      IsThreeState="False"
                      IsChecked="{Binding IsTriggerEnabled, Mode=OneWay}"
                      Command="{Binding ToggleTriggerEnabledCommand}">
            <ToggleButton.Resources>
                <SolidColorBrush x:Key="ToggleButtonBackground" Color="{DynamicResource ThemeAccent2Color}" />
                <SolidColorBrush x:Key="ToggleButtonBackgroundPointerOver" Color="{DynamicResource ThemeAccent2Color}" />
                <SolidColorBrush x:Key="ToggleButtonBackgroundPressed" Color="{DynamicResource ThemeAccent2BgColor}" />
                <SolidColorBrush x:Key="ToggleButtonBorderBrush" Color="{DynamicResource ThemeInteractiveBgColor}" />
                <SolidColorBrush x:Key="ToggleButtonBorderBrushPointerOver" Color="{DynamicResource ThemeAccent1Color}" />
                <SolidColorBrush x:Key="ToggleButtonBorderBrushPressed" Color="{DynamicResource ThemeAccent2Color}" />

                <SolidColorBrush x:Key="ToggleButtonBackgroundChecked" Color="{DynamicResource ThemeAccent3Color}" />
                <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPointerOver" Color="{DynamicResource ThemeAccent3Color}" />
                <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPressed" Color="{DynamicResource ThemeAccent3Color}" />
                <SolidColorBrush x:Key="ToggleButtonBorderBrushChecked" Color="{DynamicResource ThemeInteractiveColor}" />
                <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPointerOver" Color="{DynamicResource ThemeAccent1Color}" />
                <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPressed" Color="{DynamicResource ThemeAccent2Color}" />

                <SolidColorBrush x:Key="ToggleButtonBackgroundDisabled" Color="{DynamicResource ThemeAccent1Color}" />
            </ToggleButton.Resources>

        </ToggleButton>

        <Border Grid.Column="1"
                Classes="splitter" />

        <!--  DUPLICATE BUTTON  -->

        <Button x:Name="DuplicateTriggerButton"
                Grid.Column="2"
                Classes="defaultButton outline outlineOver"
                Command="{Binding DuplicateTriggerCommand}"
                Content="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.CommonDuplicateLabel}" />

        <Border Grid.Column="3"
                Classes="splitter" />

        <!--  DELETE BUTTON  -->

        <Button x:Name="DeleteTriggerButton"
                Grid.Column="4"
                IsEnabled="{Binding CanDelete}"
                Classes="defaultButton outline outlineOver"
                Command="{Binding DeleteThisTriggerCommand}"
                CommandParameter="{Binding $self}"
                Content="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.CommonDeleteLabel}" />
    </Grid>

</local:MpAvUserControl>
