<local:MpAvUserControl xmlns="https://github.com/avaloniaui"
                       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                       xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                       xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                       xmlns:sys="clr-namespace:System;assembly=mscorlib"
                       xmlns:local="using:MonkeyPaste.Avalonia"
                       xmlns:pcl="using:MonkeyPaste"
                       x:TypeArguments="local:MpAvMainWindowTitleMenuViewModel"
                       x:DataType="local:MpAvMainWindowTitleMenuViewModel"
                       x:CompileBindings="True"
                       DataContext="{x:Static local:MpAvMainWindowTitleMenuViewModel.Instance}"
                       mc:Ignorable="d"
                       d:DesignWidth="800"
                       d:DesignHeight="30"
                       x:Class="MonkeyPaste.Avalonia.MpAvMainWindowTitleMenuView">
    <local:MpAvUserControl.Resources>
        <sys:Double x:Key="ResizerLength">3</sys:Double>
    </local:MpAvUserControl.Resources>
    <local:MpAvUserControl.Styles>
        <!--  MOBILE ONLY  -->
        <Style Selector="Grid#TitlePanel.mobile">
            <Setter Property="Background"
                    Value="{DynamicResource TitleMenuActiveBgBrush}" />
        </Style>

        <Style Selector="Grid#TitlePanel.mobile StackPanel.edge-cntr">
            <Setter Property="VerticalAlignment"
                    Value="Center" />
        </Style>

        <Style Selector="Grid#TitlePanel.mobile :is(Button)">
            <Setter Property="Width"
                    Value="25" />
            <Setter Property="Height"
                    Value="25" />
        </Style>

        <Style Selector="Grid#TitlePanel.mobile ToggleButton#SettingsToggleButton">
            <Setter Property="Content">
                <Setter.Value>
                    <Template>
                        <Image Source="{Binding Source={StaticResource BurgerImage}, Converter={x:Static local:MpAvStringHexToBitmapTintConverter.Instance}, ConverterParameter=ThemeInteractiveColor_norand}" />
                    </Template>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  BUTTONS  -->
        <Style Selector="Grid#TitlePanel ToggleButton#SettingsToggleButton">
            <Setter Property="Content">
                <Setter.Value>
                    <Template>
                        <PathIcon Data="{StaticResource CogSvg}" />
                    </Template>
                </Setter.Value>
            </Setter>
        </Style>

        <Style Selector="Border#MinimizeBorder">
            <Setter Property="Background"
                    Value="{DynamicResource ThemeInteractiveColor}" />
        </Style>

        <Style Selector="Button:pointerover Border#MinimizeBorder">
            <Setter Property="Background"
                    Value="{DynamicResource ThemeAccent1Color}" />
        </Style>
        <Style Selector="PathIcon">
            <Setter Property="Foreground"
                    Value="{DynamicResource ThemeInteractiveColor}" />
        </Style>
        <Style Selector="PathIcon /template/ Path">
            <Setter Property="Margin"
                    Value="3" />
        </Style>
        <Style Selector="ToggleButton:checked /template/ ContentPresenter">
            <Setter Property="Background"
                    Value="Transparent" />
        </Style>
        <Style Selector="ToggleButton:checked PathIcon">
            <Setter Property="Foreground"
                    Value="{DynamicResource ThemeAccent3Color}" />
        </Style>
        <Style Selector=":is(Button):pointerover PathIcon">
            <Setter Property="Foreground"
                    Value="{DynamicResource ThemeAccent1Color}" />
        </Style>

        <!--  DRAG HANDLE  -->

        <Style Selector="Button#WindowOrientationHandleButton Image">
            <Setter Property="Source"
                    Value="{Binding Source={StaticResource Dots2x10Image}, Converter={x:Static local:MpAvStringHexToBitmapTintConverter.Instance}, ConverterParameter=ThemeInteractiveColor_norand}" />
        </Style>

        <Style Selector="Button#WindowOrientationHandleButton:pointerover Image">
            <Setter Property="Source"
                    Value="{Binding Source={StaticResource Dots2x10Image}, Converter={x:Static local:MpAvStringHexToBitmapTintConverter.Instance}, ConverterParameter=ThemeAccent1Color}" />
        </Style>
        <Style Selector="Button#WindowOrientationHandleButton:pressed Image">
            <Setter Property="Source"
                    Value="{Binding Source={StaticResource Dots2x10Image}, Converter={x:Static local:MpAvStringHexToBitmapTintConverter.Instance}, ConverterParameter=ThemeGrayAccent1Color}" />
        </Style>

        <!--  RESIZER  -->
        <Style Selector="Border.resizer">
            <Setter Property="Cursor"
                    Value="SizeNorthSouth" />
            <Setter Property="Background"
                    Value="{StaticResource HitTestableTransparent}" />
        </Style>
        <Style Selector="Border.resizer:pointerover">
            <Setter Property="Background"
                    Value="{DynamicResource ThemeAccent1Color}" />
        </Style>

        <Style Selector="Border.resizer.bottom, Border.resizer.top">
            <Setter Property="Cursor"
                    Value="SizeNorthSouth" />
            <Setter Property="Width"
                    Value="{StaticResource NaN}" />
            <Setter Property="Height"
                    Value="{StaticResource ResizerLength}" />
            <Setter Property="HorizontalAlignment"
                    Value="Stretch" />
        </Style>
        <Style Selector="Border.resizer.left, Border.resizer.right">
            <Setter Property="Cursor"
                    Value="SizeWestEast" />
            <Setter Property="Width"
                    Value="{StaticResource ResizerLength}" />
            <Setter Property="Height"
                    Value="{StaticResource NaN}" />
            <Setter Property="VerticalAlignment"
                    Value="Stretch" />
        </Style>

        <Style Selector="Border.resizer.left">
            <Setter Property="HorizontalAlignment"
                    Value="Right" />
        </Style>
        <Style Selector="Border.resizer.right">
            <Setter Property="HorizontalAlignment"
                    Value="Left" />
        </Style>

        <Style Selector="Border.resizer.top">
            <Setter Property="VerticalAlignment"
                    Value="Bottom" />
        </Style>
        <Style Selector="Border.resizer.bottom">
            <Setter Property="VerticalAlignment"
                    Value="Top" />
        </Style>
    </local:MpAvUserControl.Styles>
    <Grid x:Name="TitlePanel"
          Classes.mobile="{Binding IsMobile, Source={x:Static local:MpAvThemeViewModel.Instance}}"
          HorizontalAlignment="Stretch"
          VerticalAlignment="Stretch">
        <!--  LEFT  -->

        <StackPanel x:Name="LeftStackPanel"
                    Classes="edge-cntr"
                    Orientation="Horizontal"
                    HorizontalAlignment="Left">
            <!--  SETTINGS BUTTON  -->

            <ToggleButton x:Name="SettingsToggleButton"
                          Classes="noBg noHoverBg"
                          Command="{Binding ToggleShowSettingsWindowCommand, Source={x:Static local:MpAvSettingsViewModel.Instance}}"
                          IsChecked="{Binding IsWindowOpen, Source={x:Static local:MpAvSettingsViewModel.Instance}, Mode=OneWay}"
                          ToolTip.ShowDelay="500">
                <ToolTip.Tip>
                    <local:MpAvToolTipView ToolTipText="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.CommonSettingsTitle}"
                                           InputGestureText="{Binding ., ConverterParameter=ShowSettings, Converter={x:Static local:MpAvShortcutTypeOrCommandObjToKeyStringConverter.Instance}}" />
                </ToolTip.Tip>
            </ToggleButton>

            <!--  LOCK BUTTON  -->
            <ToggleButton x:Name="LockToggleButton"
                          IsVisible="{Binding IsDesktop, Source={x:Static local:MpAvThemeViewModel.Instance}}"
                          IsChecked="{Binding IsMainWindowLocked, Source={x:Static local:MpAvMainWindowViewModel.Instance}, Mode=OneWay}"
                          Command="{Binding ToggleMainWindowLockCommand, Source={x:Static local:MpAvMainWindowViewModel.Instance}}"
                          CommandParameter="{Binding $self}"
                          Classes="noBg noHoverBg">
                <ToolTip.Tip>
                    <local:MpAvToolTipView ToolTipText="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.MainWindowTitleLockLabel}"
                                           InputGestureText="{Binding ., ConverterParameter=ToggleMainWindowLocked, Converter={x:Static local:MpAvShortcutTypeOrCommandObjToKeyStringConverter.Instance}}" />
                </ToolTip.Tip>
                <PathIcon Data="{StaticResource LockOutlineSvg}" />
            </ToggleButton>

            <!--  MINIMIZE BUTTON  -->

            <Button x:Name="MinimizeMainWindowButton"
                    Margin="5,0,0,0"
                    Width="20"
                    Height="20"
                    Command="{Binding ForceMinimizeMainWindowCommand, Source={x:Static local:MpAvMainWindowViewModel.Instance}}"
                    Classes="noBg noHoverBg noBorder noHoverBorder">
                <Button.IsVisible>
                    <MultiBinding Converter="{x:Static BoolConverters.And}">
                        <Binding Path="IsDesktop"
                                 Source="{x:Static local:MpAvThemeViewModel.Instance}" />
                        <Binding Path="IsChecked"
                                 ElementName="LockToggleButton" />
                    </MultiBinding>
                </Button.IsVisible>
                <ToolTip.Tip>
                    <local:MpAvToolTipView ToolTipText="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.CommonMinimizeWindowLabel}"
                                           InputGestureText="{Binding ., ConverterParameter=HideMainWindow, Converter={x:Static local:MpAvShortcutTypeOrCommandObjToKeyStringConverter.Instance}}" />
                </ToolTip.Tip>
                <Border x:Name="MinimizeBorder"
                        CornerRadius="5"
                        Height="5"
                        Width="15"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Center" />

            </Button>
        </StackPanel>

        <!--  MIDDLE (DRAG HANDLE)  -->
        <Button x:Name="WindowOrientationHandleButton"
                BorderThickness="0"
                Cursor="SizeAll"
                IsVisible="{Binding IsDesktop, Source={x:Static local:MpAvThemeViewModel.Instance}}"
                Classes="noBg noHoverBg outlineOver"
                HorizontalAlignment="Center"
                VerticalAlignment="Stretch"
                Padding="0"
                Width="50">
            <Button.RenderTransform>
                <RotateTransform />
            </Button.RenderTransform>
            <Image HorizontalAlignment="Stretch"
                   VerticalAlignment="Stretch"
                   Margin="5,0" />
        </Button>

        <!--  RIGHT  -->

        <StackPanel x:Name="RightStackPanel"
                    Classes="edge-cntr"
                    Orientation="Horizontal"
                    HorizontalAlignment="Right">

            <!--  Zoom Factor Slider  -->
            <local:MpAvZoomFactorView x:Name="ZoomFactorView"
                                      IsVisible="{Binding SelectedCopyItemId, Converter={x:Static local:MpAvIsNotNullZeroOrEmptyToBoolConverter.Instance}, ConverterParameter=test, Source={x:Static local:MpAvClipTrayViewModel.Instance}}" />

            <!--  Layout Toggle Button  -->

            <ToggleButton x:Name="GridLayoutToggleButton"
                          Classes="noBg noHoverBg noBorder"
                          Command="{Binding ToggleLayoutTypeCommand, Source={x:Static local:MpAvClipTrayViewModel.Instance}}"
                          IsChecked="{Binding IsGridLayout, Mode=OneWay, Source={x:Static local:MpAvClipTrayViewModel.Instance}}"
                          ToolTip.ShowDelay="0">
                <PathIcon Data="{StaticResource GridLayoutSvg}">
                    <ToolTip.Tip>
                        <local:MpAvToolTipView ToolTipText="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.MainWindowTitleToggleGridLayoutToolTip}" />
                    </ToolTip.Tip>
                </PathIcon>
            </ToggleButton>

            <!--  Orientation Cycle CCW Button  -->

            <Button x:Name="MainWindowCycleOrientationCcwButton"
                    Command="{Binding CycleOrientationCommand, Source={x:Static local:MpAvMainWindowViewModel.Instance}}"
                    CommandParameter="CCW"
                    Classes="noBg noHoverBg noBorder"
                    IsVisible="{Binding IsDesktop, Source={x:Static local:MpAvThemeViewModel.Instance}}"
                    local:MpAvPointerCommandExtension.IsEnabled="True"
                    local:MpAvPointerCommandExtension.RightPressCommand="{Binding CycleOrientationCommand, Source={x:Static local:MpAvMainWindowViewModel.Instance}}"
                    local:MpAvPointerCommandExtension.RightPressCommandParameter="CW">
                <ToolTip.Tip>
                    <local:MpAvToolTipView ToolTipText="{Binding Source={x:Static local:R.U}, Path=CurrentUiStrings.MainWindowTitleCycleOrientationToolTip}" />
                </ToolTip.Tip>

                <PathIcon Data="{StaticResource RotateCcwSvg}" />
            </Button>
        </StackPanel>

        <!--  RESIZER  -->


        <Border x:Name="MainWindowResizerBorder"
                DataContext="{x:Static local:MpAvMainWindowViewModel.Instance}"
                x:DataType="local:MpAvMainWindowViewModel"
                Classes="resizer"
                Classes.left="{Binding IsLeftOrientation}"
                Classes.top="{Binding IsTopOrientation}"
                Classes.right="{Binding IsRightOrientation}"
                Classes.bottom="{Binding IsBottomOrientation}"
                IsVisible="{Binding IsDesktop, Source={x:Static local:MpAvThemeViewModel.Instance}}"
                local:MpAvPointerCommandExtension.IsEnabled="True"
                local:MpAvPointerCommandExtension.DoubleLeftPressCommand="{Binding WindowSizeToDefaultCommand}"
                local:MpAvPointerCommandExtension.RoutingStrategy="Tunnel"
                local:MpAvResizeExtension.MinHeight="{Binding MainWindowMinHeight}"
                local:MpAvResizeExtension.MaxHeight="{Binding MainWindowMaxHeight}"
                local:MpAvResizeExtension.MinWidth="{Binding MainWindowMinWidth}"
                local:MpAvResizeExtension.MaxWidth="{Binding MainWindowMaxWidth}"
                local:MpAvResizeExtension.BoundWidth="{Binding MainWindowWidth, Mode=TwoWay}"
                local:MpAvResizeExtension.BoundHeight="{Binding MainWindowHeight, Mode=TwoWay}"
                local:MpAvResizeExtension.DefaultWidth="{Binding MainWindowDefaultWidth}"
                local:MpAvResizeExtension.DefaultHeight="{Binding MainWindowDefaultHeight}"
                local:MpAvResizeExtension.CanResize="{Binding CanResize, Mode=TwoWay}"
                local:MpAvResizeExtension.IsResizing="{Binding IsResizing, Mode=TwoWay}"
                local:MpAvResizeExtension.XFactor="{Binding ResizeXFactor}"
                local:MpAvResizeExtension.YFactor="{Binding ResizeYFactor}"
                local:MpAvResizeExtension.GlobalResizeMessage="MainWindowSizeChanged"
                local:MpAvResizeExtension.IsEnabled="{Binding IsDesktop, Source={x:Static local:MpAvThemeViewModel.Instance}, FallbackValue=False, TargetNullValue=False}" />
    </Grid>
</local:MpAvUserControl>
